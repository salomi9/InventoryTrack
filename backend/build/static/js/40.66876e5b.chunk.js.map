{"version":3,"sources":["contant/custom.js","dashboard/UsersTable/UsersTable.js"],"names":["WEB_URL","columns","name","field","options","filter","sort","download","downloadOptions","filename","filterType","selectableRows","responsive","rowsPerPage","print","viewColumns","rowsPerPageOptions","customToolbar","to","pathname","color","UsersTable","state","rowData","fetchUser","e","fetch","then","response","json","data","modifiedData","undefined","map","res","console","log","BUID","push","BUName","userType","email","setState","catch","err","this","URL","params","method","headers","body","JSON","stringify","status","props","history","title","React","Component"],"mappings":"6KAKeA,IADC,I,6ICEVC,EAAU,CAUZ,CACIC,KAAM,OACNC,MAAO,OACPC,QAAS,CACLC,QAAQ,IAGhB,CACIH,KAAM,KACNC,MAAO,SACPC,QAAS,CACLC,QAAQ,IAGhB,CACIH,KAAM,YACNC,MAAO,WACPC,QAAS,CACLC,QAAQ,IAGhB,CACIH,KAAM,QACNC,MAAO,QACPC,QAAS,CACLC,QAAQ,IAGhB,CACIH,KAAM,UACNC,MAAO,UACPC,QAAS,CACLC,QAAQ,EACRC,MAAM,EACNC,UAAU,KAOlBH,EAAU,CAEVI,gBAAiB,CAAEC,SAAU,sBAC7BC,WAAY,WACZC,gBAAgB,EAChBC,WAAY,SACZC,YAAa,EACbR,QAAQ,EACRS,OAAO,EACPC,aAAa,EACbC,oBAAoB,EAEpBC,cAAe,kBAAM,kBAAC,IAAD,CAAMC,GAAI,CAC3BC,SAAU,kBACX,kBAAC,IAAD,CAASC,MAAM,WAAf,UAIDC,E,4MAEFC,MAAQ,CACJC,QAAS,I,EAgCbC,UAAY,SAACC,GACTC,MAAM1B,IAAU,qBACX2B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAIC,EAAe,QACOC,GAAtBF,EAAKA,MAA+BA,EAAKA,OACzCA,EAAKA,KAAKG,KAAI,SAAAC,GACVC,QAAQC,IAAI,cAAeF,EAAIG,KAAMH,EAAIG,MACzCN,EAAaO,KAAK,CACd,KAAQJ,EAAIhC,KACZ,UAAqB8B,IAAbE,EAAIG,KAAqB,eAAiBH,EAAIG,KACtD,YAAyBL,GAAdE,EAAIK,OAAsB,eAAiBL,EAAIK,OAC1D,SAAYL,EAAIM,SAChB,MAASN,EAAIO,MACb,QAAW,kBAAC,IAAD,CACKvB,GAAI,CACAC,SAAU,iBACVe,QAGP,kBAAC,IAAD,CAASd,MAAM,WAAf,cAMrB,EAAKsB,SAAS,CACVnB,QAASQ,QAIpBY,OAAM,SAAAC,Q,kEA3DXC,KAAKrB,c,kCAIGsB,EAAKC,GAAS,IAAD,OACrB,OAAOrB,MAAM1B,IAAU8C,EAAK,CACxBE,OAAQ,OACR,YAAe,UACfC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUL,KAEpBpB,MAAK,SAAAG,GAOF,OANmB,KAAfA,EAAKuB,QAGe,KAAfvB,EAAKuB,SAFV,EAAKC,MAAMC,QAAQjB,KAAK,UAKrBR,EAAKD,UAEfc,OAAM,SAAAC,GACH,OAAOA,O,+BAyCf,OACI,kBAAC,IAAD,CACAY,MAAO,QACP1B,KAAMe,KAAKvB,MAAMC,QACjBtB,QAASA,EACTG,QAASA,Q,GA7EIqD,IAAMC,WAmFhBrC","file":"static/js/40.66876e5b.chunk.js","sourcesContent":["//For Development with react - local db\n// const WEB_URL = \"http://127.0.0.1:5050\" \n\n//For deployment with node - Compile EXE\nconst WEB_URL = \"\"\nexport default WEB_URL;","import React from 'react';\nimport MaterialDatatable from \"material-datatable\";\nimport { CBadge, CButton } from '@coreui/react';\nimport { Link } from 'react-router-dom';\nimport WEB_URL from '../../contant/custom';\n\nconst columns = [\n    // {\n    //     name: \"Sr. No.\",\n    //     field: \"userID\",\n    //     options: {\n    //         width: 150,\n    //         filter: true,\n    //         sort: true,\n    //     }\n    // },\n    {\n        name: \"Name\",\n        field: \"name\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"BU\",\n        field: \"BUName\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"User Type\",\n        field: \"userType\",\n        options: { \n            filter: true,\n        }\n    },\n    {\n        name: \"Email\",\n        field: \"email\",\n        options: {\n            filter: true,\n        }\n    },\n    {\n        name: \"Actions\",\n        field: 'actions',\n        options: {\n            filter: true,\n            sort: false,\n            download: false\n        }\n    }\n];\n\n\n\nlet options = {\n    \n    downloadOptions: { filename: \"UsersTableData.csv\"},\n    filterType: 'checkbox',\n    selectableRows: false,\n    responsive: 'scroll',\n    rowsPerPage: 5,\n    filter: false,\n    print: false,\n    viewColumns: false,\n    rowsPerPageOptions: false,\n    \n    customToolbar: () => <Link to={{\n        pathname: '/usersAddForm',\n    }}><CButton color=\"primary\">Add</CButton></Link>\n    \n};\n\nclass UsersTable extends React.Component {\n\n    state = {\n        rowData: []\n    }\n\n    componentDidMount() {\n        this.fetchUser();\n    }\n\n    /*Api Calls*/\n    dataRequest(URL, params) {\n        return fetch(WEB_URL + URL, {\n            method: 'POST',\n            'credentials': 'include',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(params)\n        })\n            .then(data => {\n                if (data.status == 401) {\n                    this.props.history.push('/login');\n                }\n                else if (data.status == 403) {\n                    this.props.history.push('/login');\n                }\n                return data.json();\n            })\n            .catch(err => {\n                return err;\n            })\n    }\n\n    fetchUser = (e) => {\n        fetch(WEB_URL + \"/user/fetch?all=1\")\n            .then(response => response.json())\n            .then(data => {\n                let modifiedData = []\n                if (data.data != (null || undefined) && data.data) {\n                    data.data.map(res => {\n                        console.log(\"buid\", typeof res.BUID, res.BUID)\n                        modifiedData.push({\n                            \"name\": res.name,\n                            \"buId\": res.BUID !== undefined ? \"Not assigned\" : res.BUID,\n                            \"BUName\":  res.BUName == undefined ? \"Not assigned\" : res.BUName,\n                            \"userType\": res.userType,\n                            \"email\": res.email,\n                            \"actions\": <Link\n                                            to={{\n                                                pathname: '/UsersEditForm',\n                                                res\n                                            }}>\n                                        \n                                         <CButton color=\"primary\">\n                                            Edit\n                                         </CButton>\n                            </Link>\n                        })\n                    })\n                    this.setState({\n                        rowData: modifiedData\n                    })\n                }\n            })\n            .catch(err => {\n\n            })\n    }\n\n    render() {\n        return (\n            <MaterialDatatable\n            title={\"Users\"}\n            data={this.state.rowData}\n            columns={columns}\n            options={options}\n        />\n        ) }\n\n}\n\nexport default UsersTable;\n\n"],"sourceRoot":""}