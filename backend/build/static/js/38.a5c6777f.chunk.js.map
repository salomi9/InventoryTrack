{"version":3,"sources":["contant/custom.js","dashboard/UsersTable/UsersAddForm.js"],"names":["WEB_URL","BasicForms","state","bu","buArr","buValid","buInvalid","userType","utArr","userTypeValid","usertypeInvalid","name","nameValid","nameInvalid","email","emailInvalid","emailValid","fetchBu","e","fetch","then","response","json","data","undefined","setState","catch","err","fetchUserType","console","log","handleUserTypeChange","target","value","userTypeInvalid","handleBuChange","handleNameChange","match","handleEmailChange","test","handleSubmit","alert","props","param","BUID","dataRequest","message","show","error","handleReset","this","URL","params","selectedDate","method","headers","body","JSON","stringify","status","history","push","optionItems","map","res","index","key","_id","BUName","optionItemsut","xs","action","encType","className","row","md","htmlFor","style","color","type","id","placeholder","autoComplete","valid","invalid","onChange","custom","size","margin","onClick","to","React","Component","withAlert"],"mappings":"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","file":"static/js/38.a5c6777f.chunk.js","sourcesContent":["//For Development with react - local db\n// const WEB_URL = \"http://127.0.0.1:5050\" \n\n//For deployment with node - Compile EXE\nconst WEB_URL = \"\"\nexport default WEB_URL;","import React from 'react'\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CFormText,\n    CValidFeedback,\n    CInvalidFeedback,\n    CInput,\n    CLabel,\n    CSelect,\n    CRow,\n    CTextarea\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport WEB_URL from '../../contant/custom';\nimport { withAlert } from 'react-alert';\nimport {Link} from 'react-router-dom';\n\nclass BasicForms extends React.Component {\n    state = {\n        bu: \"\",\n        buArr: [],\n        buValid: false,\n        buInvalid: false,\n\n        userType: \"\",\n        utArr: [],\n        userTypeValid: false,\n        usertypeInvalid: false,\n        // sendBacktype: \"Team Member\",\n\n        name: \"\",\n        nameValid: false,\n        nameInvalid: false,\n\n        email: \"\",\n        emailInvalid: false,\n        emailValid: false,\n    }\n\n    componentDidMount() {\n        this.fetchBu();\n        this.fetchUserType();\n        //console.log(\"PROPS OF ADMIN\", this.props)\n    }\n\n    /*Api Calls*/\n    dataRequest(URL, params) {\n        console.log(\"inside data req func\", params.selectedDate)\n        return fetch(WEB_URL + URL, {\n            method: 'POST',\n            'credentials': 'include',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(params)\n        })\n            .then(data => {\n                if (data.status == 401) {\n                    //alert(\"ERRR\")\n                    this.props.history.push('/login');\n                    //alert(data.message)\n                }\n                else if (data.status == 403) {\n                    this.props.history.push('/login');\n                    //alert(data.message)\n                }\n                return data.json()\n            })\n            .catch(err => {\n                console.log(\"chartErr\", err)\n                return err\n            })\n    }\n\n    fetchBu = (e) => {\n        fetch(WEB_URL + \"/bu/fetch\")\n            .then(response => response.json())\n            .then(data => {\n                if (data.data != (null || undefined) && data.data) {\n                    this.setState({\n                        buArr: data.data\n                    })\n                }\n            })\n            .catch(err => {\n\n            })\n    }\n\n    fetchUserType = (e) => {\n\n        fetch(WEB_URL + \"/types/ut\")\n            .then(response => response.json())\n            .then(data => {\n                if (data.data != (null || undefined) && data.data) {\n                    this.setState({\n                        utArr: data.data\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(\"User type Fetch Array\", err);\n            })\n    }\n\n    handleUserTypeChange = (e) => {\n        if (e.target.value != \"\" && e.target.value != \"Please select\") {\n\n            this.setState({\n                // sendBacktype: userType,\n                userType: e.target.value,\n                userTypeValid: true,\n                userTypeInvalid: false\n            })\n        }\n        else {\n            this.setState({\n                userType: \"\",\n                userTypeInvalid: true,\n                userTypeValid: false\n            })\n        }\n    }\n\n    handleBuChange = (e) => {\n        if (e.target.value != (\"\" && undefined) && e.target.value != \"Please select BU\") {\n            this.setState({\n                bu: e.target.value,\n                buValid: true,\n                buInvalid: false\n            })\n        }\n        else {\n            this.setState({\n                bu: \"\",\n                buValid: false,\n                buInvalid: true\n            })\n        }\n    }\n\n    handleNameChange = (e) => {\n        var letters = /^[a-zA-Z-,]+(\\s{0,1}[a-zA-Z-, ])*$/;\n    if (e.target.value != \"\" && e.target.value != null && e.target.value.match(letters)) {\n            this.setState({\n                name: e.target.value,\n                nameValid: true,\n                nameInvalid: false\n            })\n        }\n        else {\n            this.setState({\n                name: e.target.value,\n                nameValid: false,\n                nameInvalid: true\n            })\n        }\n    }\n\n    handleEmailChange = (e) => {\n        let filter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,15})+$/;\n\n        if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,15})+$/.test(e.target.value)) {\n            //console.log(\"inside email change\")\n            this.setState({\n                email: e.target.value,\n                emailValid: true,\n                emailInvalid: false\n            })\n        }\n        else {\n            //console.log(\"inside email change\", e.target.value)\n            this.setState({\n                email: e.target.value,\n                emailInvalid: true,\n                emailValid: false\n            })\n        }\n    }\n\n    handleSubmit = () => {\n        const alert = this.props.alert;\n        if (\n            this.state.emailValid && this.state.userTypeValid && this.state.nameValid\n        ) {\n            let param = {}\n\n            param.email = this.state.email;\n            param.name = this.state.name;\n            param.BUID = this.state.bu;\n            param.userType = this.state.userType;\n\n\n            //assign parvam\n            this.dataRequest('/user/add', param)\n                .then(data => {\n                    if (data.message != undefined) {\n                        alert.show(data.message);\n                    }\n                    else {\n                        alert.show(\"Internal Server Error !\")\n                    }\n                })\n                .catch(error => {\n                    alert.show(\"Oops, Something went wrong!\")\n                })\n        }\n        else {\n            console.log(\"inside else\")\n            alert.show(\"Please fill all the required fields\")\n        }\n    }\n\n    handleReset = () => {\n        this.setState({\n\n            userType: \"\",\n            userTypeValid: false,\n            userTypeInvalid: false,\n\n            bu: \"\",\n            buValid: false,\n            buInvalid: false,\n\n            name: \"\",\n            nameValid: false,\n            nameInvalid: false,\n\n            email: \"\",\n            emailInvalid: false,\n            emailValid: false,\n\n        })\n    }\n\n    render() {\n\n        let buArr = this.state.buArr;\n        let optionItems = buArr.map((res, index) =>\n            <option key={res._id} value={res._id}>{res.BUName}</option>\n        );\n\n        let utArr = this.state.utArr;\n        let optionItemsut = utArr.map((res, index) =>\n            <option key={res} >{res}</option>\n        );\n\n\n        return (\n            <>\n                <CCard>\n                    <CCardHeader>\n                        Add User Details\n                    </CCardHeader>\n                    <CCardBody>\n                        <CCol xs=\"3\">\n\n                        </CCol>\n                        <CCol xs=\"7\">\n                            <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"email-input\">Name<span style= {{color: 'red'}}>*</span></CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CInput\n                                            type=\"text\"\n                                            id=\"tex1-input\"\n                                            name=\"text1-input\"\n                                            placeholder=\"Enter User's Name\"\n                                            autoComplete=\"tex1\"\n                                            value={this.state.name}\n                                            valid={this.state.nameValid}\n                                            invalid={this.state.nameInvalid}\n                                            onChange={e => this.handleNameChange(e)}\n                                        />\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>Please Enter a Valid Name!</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"select\">Business Unit</CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CSelect\n                                            custom\n                                            name=\"select\"\n                                            id=\"select\"\n                                            value={this.state.bu}\n                                            valid={this.state.buValid}\n                                            invalid={this.state.buInvalid}\n                                            onChange={e => this.handleBuChange(e)}\n                                        // onClick={this.fetchBu}\n                                        >\n                                            {/* <option>{this.state.bu != \"\" ? this.state.bu : \"Please select BU\"}</option> */}\n                                            {/* <option >PES</option>\n                                                <option >ATE</option>\n                                                <option >IIOT</option> */}\n                                            <option >Please select BU</option>\n                                            {optionItems}\n                                        </CSelect>\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>This field is required!</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"text-input\">User Type<span style= {{color: 'red'}}>*</span></CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CSelect\n                                            custom\n                                            name=\"select\"\n                                            id=\"select\"\n                                            value={this.state.userType}\n                                            valid={this.state.userTypeValid}\n                                            invalid={this.state.userTypeInvalid}\n                                            onChange={e => this.handleUserTypeChange(e)}\n                                        >\n                                            {/* <option>Please Select</option>\n                                            <option>Team Representative</option>\n                                            <option>Team Member</option>\n                                            <option>Management</option> */}\n                                            <option>{this.state.userType != \"\" ? this.state.userType : \"Please select User Type\"}</option>\n                                            {optionItemsut}\n                                        </CSelect>\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>This field is required!</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"email-input\">EmailID<span style= {{color: 'red'}}>*</span></CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CInput\n                                            type=\"text\"\n                                            id=\"email-input\" name=\"email-input\"\n                                            placeholder=\"Enter Email Address\"\n                                            autoComplete=\"email\"\n                                            value={this.state.email}\n                                            valid={this.state.emailValid}\n                                            invalid={this.state.emailInvalid}\n                                            onChange={e => this.handleEmailChange(e)}\n                                        />\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>Please Enter Valid Email</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                            </CForm></CCol>\n\n                    </CCardBody>\n                    <CCardFooter>\n                        <CButton\n                            type=\"submit\"\n                            size=\"sm\" color=\"primary\" style={{ margin: \"3px\" }}\n                            onClick={this.handleSubmit}\n                        >\n                            {/* <CIcon name=\"cil-scrubber\" /> */}\n                            Submit\n                        </CButton>\n\n                        <CButton\n                            type=\"reset\"\n                            size=\"sm\" color=\"danger\" style={{ margin: \"3px\" }}\n                            onClick={this.handleReset}\n                        >\n                            {/* <CIcon name=\"cil-ban\" /> */}\n                            Reset\n                        </CButton>\n\n                        <Link to=\"/usersTable\">\n                            <CButton\n                                size=\"sm\" color=\"dark\" style={{ margin: \"3px\" }}\n                            //href=\"/src/dashboard/UsersTable#/usersTable\"\n                            >\n                                Back\n                        </CButton>\n                        </Link>\n                    </CCardFooter>\n                </CCard>\n            </>\n        )\n    }\n\n}\n\n\nexport default withAlert()(BasicForms);"],"sourceRoot":""}