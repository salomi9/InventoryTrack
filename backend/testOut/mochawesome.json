{
  "stats": {
    "suites": 15,
    "tests": 44,
    "passes": 24,
    "pending": 0,
    "failures": 20,
    "start": "2020-07-12T17:15:33.241Z",
    "end": "2020-07-12T17:15:33.747Z",
    "duration": 506,
    "testsRegistered": 70,
    "passPercent": 34.285714285714285,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 26,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "4b63998a-c08c-4a82-ad16-fcfe56271337",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "All input",
          "fullTitle": "All input",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const parameter = {\n    \"all\": invalall\n}\nlet buSchema = await buSchema.find({}, {})\nbuSchema = JSON.parse(JSON.stringify(BU))\nreturn baseURL.get('/bu/fetch')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(parameter)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye cheeze aayi\", res.body.data)\n        console.log(\"Ye aana chaiye\", BU)\n        expect(res.body).to.haveOwnProperty('data')\n        console.log(\"length\", res.body.data.length, BU.length)\n        expect(res.body.data).to.a('array').have.lengthOf(BU.length)\n        expect(res.body.data).to.have.deep.members(BU)\n    })",
          "err": {},
          "uuid": "7bf3fd7e-1c82-4d98-ac1a-bc9f0c161020",
          "parentUUID": "4b63998a-c08c-4a82-ad16-fcfe56271337",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "All input",
          "fullTitle": "All input",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const parameter = {\n    \"all\": invalall\n}\nlet buSchema = await buSchema.find({}, {})\nbuSchema = JSON.parse(JSON.stringify(BU))\nreturn baseURL.get('/bu/fetch')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(parameter)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye cheeze aayi\", res.body.data)\n        console.log(\"Ye aana chaiye\", BU)\n        expect(res.body).to.haveOwnProperty('data')\n        console.log(\"length\", res.body.data.length, BU.length)\n        expect(res.body.data).to.a('array').have.lengthOf(BU.length)\n        expect(res.body.data).to.have.deep.members(BU)\n    })",
          "err": {},
          "uuid": "0ce458e9-af5c-414f-91f9-fd7c66dc3116",
          "parentUUID": "4b63998a-c08c-4a82-ad16-fcfe56271337",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "All input",
          "fullTitle": "All input",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const parameter = {\n    \"all\": invalall\n}\nlet buSchema = await buSchema.find({}, {})\nbuSchema = JSON.parse(JSON.stringify(BU))\nreturn baseURL.get('/bu/fetch')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(parameter)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye cheeze aayi\", res.body.data)\n        console.log(\"Ye aana chaiye\", BU)\n        expect(res.body).to.haveOwnProperty('data')\n        console.log(\"length\", res.body.data.length, BU.length)\n        expect(res.body.data).to.a('array').have.lengthOf(BU.length)\n        expect(res.body.data).to.have.deep.members(BU)\n    })",
          "err": {},
          "uuid": "ef07c70a-aa64-470c-8ce3-840241313678",
          "parentUUID": "4b63998a-c08c-4a82-ad16-fcfe56271337",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "All input",
          "fullTitle": "All input",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const parameter = {\n    \"all\": invalall\n}\nlet buSchema = await buSchema.find({}, {})\nbuSchema = JSON.parse(JSON.stringify(BU))\nreturn baseURL.get('/bu/fetch')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(parameter)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye cheeze aayi\", res.body.data)\n        console.log(\"Ye aana chaiye\", BU)\n        expect(res.body).to.haveOwnProperty('data')\n        console.log(\"length\", res.body.data.length, BU.length)\n        expect(res.body.data).to.a('array').have.lengthOf(BU.length)\n        expect(res.body.data).to.have.deep.members(BU)\n    })",
          "err": {},
          "uuid": "98316fee-750a-4c3b-be0c-e741e1415490",
          "parentUUID": "4b63998a-c08c-4a82-ad16-fcfe56271337",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "All input",
          "fullTitle": "All input",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const parameter = {\n    \"all\": invalall\n}\nlet buSchema = await buSchema.find({}, {})\nbuSchema = JSON.parse(JSON.stringify(BU))\nreturn baseURL.get('/bu/fetch')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(parameter)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye cheeze aayi\", res.body.data)\n        console.log(\"Ye aana chaiye\", BU)\n        expect(res.body).to.haveOwnProperty('data')\n        console.log(\"length\", res.body.data.length, BU.length)\n        expect(res.body.data).to.a('array').have.lengthOf(BU.length)\n        expect(res.body.data).to.have.deep.members(BU)\n    })",
          "err": {},
          "uuid": "efd66714-8a53-42a1-b60f-192d3a641f5a",
          "parentUUID": "4b63998a-c08c-4a82-ad16-fcfe56271337",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "All input",
          "fullTitle": "All input",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const parameter = {\n    \"all\": invalall\n}\nlet buSchema = await buSchema.find({}, {})\nbuSchema = JSON.parse(JSON.stringify(BU))\nreturn baseURL.get('/bu/fetch')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(parameter)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye cheeze aayi\", res.body.data)\n        console.log(\"Ye aana chaiye\", BU)\n        expect(res.body).to.haveOwnProperty('data')\n        console.log(\"length\", res.body.data.length, BU.length)\n        expect(res.body.data).to.a('array').have.lengthOf(BU.length)\n        expect(res.body.data).to.have.deep.members(BU)\n    })",
          "err": {},
          "uuid": "79f73578-2efd-45ed-b9d7-e74682f90a00",
          "parentUUID": "4b63998a-c08c-4a82-ad16-fcfe56271337",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "c730c419-0264-4d24-8947-69c795671df4",
          "title": "BU Test module",
          "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
          "file": "/test/butest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook for \"should throw error for buid Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)\"",
              "fullTitle": "BU Test module \"before each\" hook for \"should throw error for buid Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)\"",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "buSchema = require('../models/bu.model')\nreturn buSchema.remove({ \"buId\": ObjectId(addReq.buId) });",
              "err": {
                "message": "Error: Argument passed in must be a single String of 12 bytes or a string of 24 hex characters",
                "estack": "Error: Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\n    at new ObjectID (node_modules/bson/lib/bson/objectid.js:59:11)\n    at ObjectID (node_modules/bson/lib/bson/objectid.js:40:43)\n    at Context.<anonymous> (test/butest.js:19:42)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": null
              },
              "uuid": "1ee21dee-04f2-4a2f-ae76-cfb17997521c",
              "parentUUID": "c730c419-0264-4d24-8947-69c795671df4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "59fe5ad7-29de-4245-8824-8c7d67bd96f5",
              "title": "BU Fetch",
              "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
              "file": "/test/butest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should give array of BU",
                  "fullTitle": "BU Test module BU Fetch should give array of BU",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let invalidAlls = [\"1\", 0, \"\", null, undefined, new Object()]\nfor (let invalall of invalidAlls) {\n    it('All input', async () => {\n        const parameter = {\n            \"all\": invalall\n        }\n        let buSchema = await buSchema.find({}, {})\n        buSchema = JSON.parse(JSON.stringify(BU))\n        return baseURL.get('/bu/fetch')\n            .set('Content-Type', 'application/json')\n            .set('Accept', 'application/json')\n            .send(parameter)\n            .expect(200)\n            .expect('Content-Type', 'application/json; charset=utf-8')\n            .then(res => {\n                console.log(\"Ye cheeze aayi\", res.body.data)\n                console.log(\"Ye aana chaiye\", BU)\n                expect(res.body).to.haveOwnProperty('data')\n                console.log(\"length\", res.body.data.length, BU.length)\n                expect(res.body.data).to.a('array').have.lengthOf(BU.length)\n                expect(res.body.data).to.have.deep.members(BU)\n            })\n    })\n}",
                  "err": {},
                  "uuid": "91b2efec-b0e8-4e98-8c8e-3bc1c8fda73a",
                  "parentUUID": "59fe5ad7-29de-4245-8824-8c7d67bd96f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91b2efec-b0e8-4e98-8c8e-3bc1c8fda73a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "731fb6a6-22f7-4fa4-a864-90ae9d93b246",
              "title": "BU Add",
              "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
              "file": "/test/butest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "90fe80ff-1481-41ba-be1c-2f68097364ec",
                  "title": "For Normal Inputs",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return success Message",
                      "fullTitle": "BU Test module BU Add For Normal Inputs should return success Message",
                      "timedOut": false,
                      "duration": 66,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "return baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Ticket Data has been added');\n    })",
                      "err": {
                        "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                        "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules/supertest/lib/test.js:268:12)\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /media/krunal/Data/Code/Projects/office/scms/backend/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at /media/krunal/Data/Code/Projects/office/scms/backend/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at endReadableNT (_stream_readable.js:1201:12)\n    at processTicksAndRejections (internal/process/task_queues.js:84:21)",
                        "diff": null
                      },
                      "uuid": "d670fb42-bb77-4e6b-87ab-27f114f3fce4",
                      "parentUUID": "90fe80ff-1481-41ba-be1c-2f68097364ec",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "d670fb42-bb77-4e6b-87ab-27f114f3fce4"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 66,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3c62bff6-0a39-49ec-adcb-78f97e19935d",
                  "title": "For Duplicate Input",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not add duplicate and display that Message",
                      "fullTitle": "BU Test module BU Add For Duplicate Input should not add duplicate and display that Message",
                      "timedOut": false,
                      "duration": 8,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "return baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(200)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        expect(res.body).to.haveOwnProperty('message')\n        // assert.equal(res.body.message, 'Already added');\n    })",
                      "err": {
                        "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                        "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules/supertest/lib/test.js:268:12)\n    at Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n    at Test.assert (node_modules/supertest/lib/test.js:173:18)\n    at localAssert (node_modules/supertest/lib/test.js:131:12)\n    at /media/krunal/Data/Code/Projects/office/scms/backend/node_modules/supertest/lib/test.js:128:5\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:728:3)\n    at /media/krunal/Data/Code/Projects/office/scms/backend/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at endReadableNT (_stream_readable.js:1201:12)\n    at processTicksAndRejections (internal/process/task_queues.js:84:21)",
                        "diff": null
                      },
                      "uuid": "6ae72898-7110-4398-93c3-357baf412198",
                      "parentUUID": "3c62bff6-0a39-49ec-adcb-78f97e19935d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "6ae72898-7110-4398-93c3-357baf412198"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d09912e5-80ac-4fcd-b35b-d4a8379068a0",
                  "title": "For Empty Body ",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for empty body",
                      "fullTitle": "BU Test module BU Add For Empty Body  should throw error for empty body",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emptyBody = {}\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(emptyBody)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Ticket Data has been added');\n        expect(res.body).to.haveOwnProperty('error');\n    })",
                      "err": {},
                      "uuid": "46d422a3-e5b8-4cd1-9f66-f05142a03fea",
                      "parentUUID": "d09912e5-80ac-4fcd-b35b-d4a8379068a0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "46d422a3-e5b8-4cd1-9f66-f05142a03fea"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8388a78e-ae0c-428d-a124-20c553ec4c89",
                  "title": "For Invalid BUName",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "throws error for invalid BU BUName 001323",
                      "fullTitle": "BU Test module BU Add For Invalid BUName throws error for invalid BU BUName 001323",
                      "timedOut": false,
                      "duration": 8,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye----------------------------------------------------\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'Invalid value' == 'BUName is Required'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'Invalid value' == 'BUName is Required'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:119:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- Invalid value\n+ BUName is Required\n"
                      },
                      "uuid": "77f5fbcb-001d-4d17-866a-27f7bc1c2169",
                      "parentUUID": "8388a78e-ae0c-428d-a124-20c553ec4c89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws error for invalid BU BUName A",
                      "fullTitle": "BU Test module BU Add For Invalid BUName throws error for invalid BU BUName A",
                      "timedOut": false,
                      "duration": 6,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye----------------------------------------------------\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'Invalid value' == 'BUName is Required'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'Invalid value' == 'BUName is Required'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:119:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- Invalid value\n+ BUName is Required\n"
                      },
                      "uuid": "0897774c-f615-460d-8ee6-049750164d97",
                      "parentUUID": "8388a78e-ae0c-428d-a124-20c553ec4c89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws error for invalid BU BUName null",
                      "fullTitle": "BU Test module BU Add For Invalid BUName throws error for invalid BU BUName null",
                      "timedOut": false,
                      "duration": 9,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye----------------------------------------------------\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: expected { message: 'BUName already exists' } to have own property 'error'",
                        "estack": "AssertionError: expected { message: 'BUName already exists' } to have own property 'error'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:118:49\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": null
                      },
                      "uuid": "fb058f1e-72e8-4349-bbf1-571e3d4d55be",
                      "parentUUID": "8388a78e-ae0c-428d-a124-20c553ec4c89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws error for invalid BU BUName undefined",
                      "fullTitle": "BU Test module BU Add For Invalid BUName throws error for invalid BU BUName undefined",
                      "timedOut": false,
                      "duration": 8,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye----------------------------------------------------\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: expected { Object (message) } to have own property 'error'",
                        "estack": "AssertionError: expected { Object (message) } to have own property 'error'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:118:49\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": null
                      },
                      "uuid": "bb860469-cef5-4a08-a564-f139d3dc34a5",
                      "parentUUID": "8388a78e-ae0c-428d-a124-20c553ec4c89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws error for invalid BU BUName error",
                      "fullTitle": "BU Test module BU Add For Invalid BUName throws error for invalid BU BUName error",
                      "timedOut": false,
                      "duration": 6,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye----------------------------------------------------\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: expected { Object (message) } to have own property 'error'",
                        "estack": "AssertionError: expected { Object (message) } to have own property 'error'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:118:49\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": null
                      },
                      "uuid": "79618968-23e5-46df-bd85-ad71733bb911",
                      "parentUUID": "8388a78e-ae0c-428d-a124-20c553ec4c89",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "77f5fbcb-001d-4d17-866a-27f7bc1c2169",
                    "0897774c-f615-460d-8ee6-049750164d97",
                    "fb058f1e-72e8-4349-bbf1-571e3d4d55be",
                    "bb860469-cef5-4a08-a564-f139d3dc34a5",
                    "79618968-23e5-46df-bd85-ad71733bb911"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 37,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "60da8351-2b73-4abd-b1c5-f79cbfd78b91",
                  "title": "For Invalid BUName of type String",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for BUName 001323",
                      "fullTitle": "BU Test module BU Add For Invalid BUName of type String should throw error for BUName 001323",
                      "timedOut": false,
                      "duration": 7,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'Invalid value' == 'BUName is Required'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'Invalid value' == 'BUName is Required'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:141:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- Invalid value\n+ BUName is Required\n"
                      },
                      "uuid": "b13f3677-bf0b-4c09-ba4e-bcae6a5b538d",
                      "parentUUID": "60da8351-2b73-4abd-b1c5-f79cbfd78b91",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName A",
                      "fullTitle": "BU Test module BU Add For Invalid BUName of type String should throw error for BUName A",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'Invalid value' == 'BUName is Required'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'Invalid value' == 'BUName is Required'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:141:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- Invalid value\n+ BUName is Required\n"
                      },
                      "uuid": "1e5ed5d6-1cb4-43bc-a134-3a32fe156efc",
                      "parentUUID": "60da8351-2b73-4abd-b1c5-f79cbfd78b91",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName null",
                      "fullTitle": "BU Test module BU Add For Invalid BUName of type String should throw error for BUName null",
                      "timedOut": false,
                      "duration": 7,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: expected { message: 'BUName already exists' } to have own property 'error'",
                        "estack": "AssertionError: expected { message: 'BUName already exists' } to have own property 'error'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:140:49\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": null
                      },
                      "uuid": "f94cad5e-162a-4d02-bf42-eb80f338fed0",
                      "parentUUID": "60da8351-2b73-4abd-b1c5-f79cbfd78b91",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName undefined",
                      "fullTitle": "BU Test module BU Add For Invalid BUName of type String should throw error for BUName undefined",
                      "timedOut": false,
                      "duration": 6,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: expected { Object (message) } to have own property 'error'",
                        "estack": "AssertionError: expected { Object (message) } to have own property 'error'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:140:49\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": null
                      },
                      "uuid": "5abe2d28-535b-4ca4-b031-5bfc6482ee4f",
                      "parentUUID": "60da8351-2b73-4abd-b1c5-f79cbfd78b91",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName error",
                      "fullTitle": "BU Test module BU Add For Invalid BUName of type String should throw error for BUName error",
                      "timedOut": false,
                      "duration": 7,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'BUName is Required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: expected { Object (message) } to have own property 'error'",
                        "estack": "AssertionError: expected { Object (message) } to have own property 'error'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:140:49\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": null
                      },
                      "uuid": "641da144-c861-47c7-a876-ea64b52bd7f2",
                      "parentUUID": "60da8351-2b73-4abd-b1c5-f79cbfd78b91",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "b13f3677-bf0b-4c09-ba4e-bcae6a5b538d",
                    "1e5ed5d6-1cb4-43bc-a134-3a32fe156efc",
                    "f94cad5e-162a-4d02-bf42-eb80f338fed0",
                    "5abe2d28-535b-4ca4-b031-5bfc6482ee4f",
                    "641da144-c861-47c7-a876-ea64b52bd7f2"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 32,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a80d1bd5-8a49-4985-ae88-243578974796",
                  "title": "For Invalid BURPID",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for BURPID null",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID should throw error for BURPID null",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "45aed9a7-dfdf-4e87-a47f-f0918c849bf5",
                      "parentUUID": "a80d1bd5-8a49-4985-ae88-243578974796",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID function Error() { [native code] }",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID should throw error for BURPID function Error() { [native code] }",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "c7eb25c0-bddc-45dc-b3c0-6d661a4dc569",
                      "parentUUID": "a80d1bd5-8a49-4985-ae88-243578974796",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID should throw error for BURPID Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "0e03b11d-4122-412c-90c1-5e054d4ffca2",
                      "parentUUID": "a80d1bd5-8a49-4985-ae88-243578974796",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID undefined",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID should throw error for BURPID undefined",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "2c6e87ca-f6b1-433b-a88d-e36da24650b8",
                      "parentUUID": "a80d1bd5-8a49-4985-ae88-243578974796",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID [object Object]",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID should throw error for BURPID [object Object]",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "0c1f6a3e-0453-4ff6-9889-2c5cb65417fe",
                      "parentUUID": "a80d1bd5-8a49-4985-ae88-243578974796",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID 123",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID should throw error for BURPID 123",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "12e12bea-cff6-4ec6-a6d0-49be2d9cf468",
                      "parentUUID": "a80d1bd5-8a49-4985-ae88-243578974796",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "45aed9a7-dfdf-4e87-a47f-f0918c849bf5",
                    "c7eb25c0-bddc-45dc-b3c0-6d661a4dc569",
                    "0e03b11d-4122-412c-90c1-5e054d4ffca2",
                    "2c6e87ca-f6b1-433b-a88d-e36da24650b8",
                    "0c1f6a3e-0453-4ff6-9889-2c5cb65417fe",
                    "12e12bea-cff6-4ec6-a6d0-49be2d9cf468"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 38,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "576bddbe-f633-47a6-a6c4-91f40d953245",
                  "title": "For Invalid BURPID of Type String",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for BURPID 001323",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID of Type String should throw error for BURPID 001323",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "e6e0c156-5917-48d7-82e8-34179a15cfe3",
                      "parentUUID": "576bddbe-f633-47a6-a6c4-91f40d953245",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID A",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID of Type String should throw error for BURPID A",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "2a0a7164-0594-412f-93a6-a9b25d952208",
                      "parentUUID": "576bddbe-f633-47a6-a6c4-91f40d953245",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID null",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID of Type String should throw error for BURPID null",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "59450726-032e-451e-92a5-06aaf52ca558",
                      "parentUUID": "576bddbe-f633-47a6-a6c4-91f40d953245",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID undefined",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID of Type String should throw error for BURPID undefined",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "fe35a7c2-967d-4403-874a-2dc856f97d63",
                      "parentUUID": "576bddbe-f633-47a6-a6c4-91f40d953245",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BURPID error",
                      "fullTitle": "BU Test module BU Add For Invalid BURPID of Type String should throw error for BURPID error",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/add')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "322bb08e-319f-41bd-8504-562f02c751b2",
                      "parentUUID": "576bddbe-f633-47a6-a6c4-91f40d953245",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e6e0c156-5917-48d7-82e8-34179a15cfe3",
                    "2a0a7164-0594-412f-93a6-a9b25d952208",
                    "59450726-032e-451e-92a5-06aaf52ca558",
                    "fe35a7c2-967d-4403-874a-2dc856f97d63",
                    "322bb08e-319f-41bd-8504-562f02c751b2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 26,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95ac390b-742d-4607-8c4b-be0a69688c70",
              "title": "BU Edit",
              "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
              "file": "/test/butest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a905d8b4-b228-4f4d-8a98-d68aa1ca1b81",
                  "title": "For Empty Body ",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for empty bodynull",
                      "fullTitle": "BU Test module BU Edit For Empty Body  should throw error for empty bodynull",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emptyBody = {}\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(emptyBody)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        // assert.equal(res.body.error[0].msg, 'Ticket No is required');\n        // assert.equal(res.body.error[0].param, 'ticketNo')\n    })",
                      "err": {},
                      "uuid": "e122f549-5312-46a9-9559-d0af54482fa7",
                      "parentUUID": "a905d8b4-b228-4f4d-8a98-d68aa1ca1b81",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for empty bodyfunction Error() { [native code] }",
                      "fullTitle": "BU Test module BU Edit For Empty Body  should throw error for empty bodyfunction Error() { [native code] }",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emptyBody = {}\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(emptyBody)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        // assert.equal(res.body.error[0].msg, 'Ticket No is required');\n        // assert.equal(res.body.error[0].param, 'ticketNo')\n    })",
                      "err": {},
                      "uuid": "2faca6e6-ff3d-4970-8bf7-4ce414275198",
                      "parentUUID": "a905d8b4-b228-4f4d-8a98-d68aa1ca1b81",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for empty bodySun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "fullTitle": "BU Test module BU Edit For Empty Body  should throw error for empty bodySun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emptyBody = {}\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(emptyBody)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        // assert.equal(res.body.error[0].msg, 'Ticket No is required');\n        // assert.equal(res.body.error[0].param, 'ticketNo')\n    })",
                      "err": {},
                      "uuid": "df67ef60-b84e-4c55-899e-c40bf89685ec",
                      "parentUUID": "a905d8b4-b228-4f4d-8a98-d68aa1ca1b81",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for empty bodyundefined",
                      "fullTitle": "BU Test module BU Edit For Empty Body  should throw error for empty bodyundefined",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emptyBody = {}\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(emptyBody)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        // assert.equal(res.body.error[0].msg, 'Ticket No is required');\n        // assert.equal(res.body.error[0].param, 'ticketNo')\n    })",
                      "err": {},
                      "uuid": "6cc3ac1b-97bc-4c33-abfd-a82ffd288084",
                      "parentUUID": "a905d8b4-b228-4f4d-8a98-d68aa1ca1b81",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for empty body[object Object]",
                      "fullTitle": "BU Test module BU Edit For Empty Body  should throw error for empty body[object Object]",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emptyBody = {}\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(emptyBody)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        // assert.equal(res.body.error[0].msg, 'Ticket No is required');\n        // assert.equal(res.body.error[0].param, 'ticketNo')\n    })",
                      "err": {},
                      "uuid": "50753433-4385-42b0-93aa-2d53b752272c",
                      "parentUUID": "a905d8b4-b228-4f4d-8a98-d68aa1ca1b81",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for empty body123",
                      "fullTitle": "BU Test module BU Edit For Empty Body  should throw error for empty body123",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const emptyBody = {}\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(emptyBody)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        // assert.equal(res.body.error[0].msg, 'Ticket No is required');\n        // assert.equal(res.body.error[0].param, 'ticketNo')\n    })",
                      "err": {},
                      "uuid": "d9f35e9c-8c0a-4fe1-8236-c1887f37f2c8",
                      "parentUUID": "a905d8b4-b228-4f4d-8a98-d68aa1ca1b81",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e122f549-5312-46a9-9559-d0af54482fa7",
                    "2faca6e6-ff3d-4970-8bf7-4ce414275198",
                    "df67ef60-b84e-4c55-899e-c40bf89685ec",
                    "6cc3ac1b-97bc-4c33-abfd-a82ffd288084",
                    "50753433-4385-42b0-93aa-2d53b752272c",
                    "d9f35e9c-8c0a-4fe1-8236-c1887f37f2c8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 39,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e4e2a622-6b9d-49ba-99ec-3d22b9a5660f",
                  "title": "For Invalid BUName",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for BUName null",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName should throw error for BUName null",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Business unit name is required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {},
                      "uuid": "b5520358-d129-4571-8a7e-280158094436",
                      "parentUUID": "e4e2a622-6b9d-49ba-99ec-3d22b9a5660f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName function Error() { [native code] }",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName should throw error for BUName function Error() { [native code] }",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Business unit name is required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {},
                      "uuid": "5a8a57d2-d04f-4f73-8148-51a0631cfff1",
                      "parentUUID": "e4e2a622-6b9d-49ba-99ec-3d22b9a5660f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName should throw error for BUName Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Business unit name is required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'Invalid value' == 'Business unit name is required'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'Invalid value' == 'Business unit name is required'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:242:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- Invalid value\n+ Business unit name is required\n"
                      },
                      "uuid": "85cf7cce-0f4f-4c9a-be78-644bbb791674",
                      "parentUUID": "e4e2a622-6b9d-49ba-99ec-3d22b9a5660f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName undefined",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName should throw error for BUName undefined",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Business unit name is required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {},
                      "uuid": "a58843c0-cb12-45b2-82f9-0779cffbc87e",
                      "parentUUID": "e4e2a622-6b9d-49ba-99ec-3d22b9a5660f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName [object Object]",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName should throw error for BUName [object Object]",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Business unit name is required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'Invalid value' == 'Business unit name is required'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'Invalid value' == 'Business unit name is required'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:242:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- Invalid value\n+ Business unit name is required\n"
                      },
                      "uuid": "e61909e8-a8b3-411b-a07d-e1337639e209",
                      "parentUUID": "e4e2a622-6b9d-49ba-99ec-3d22b9a5660f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName 123",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName should throw error for BUName 123",
                      "timedOut": false,
                      "duration": 9,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Business unit name is required');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'Invalid value' == 'Business unit name is required'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'Invalid value' == 'Business unit name is required'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:242:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- Invalid value\n+ Business unit name is required\n"
                      },
                      "uuid": "ccb15022-004f-416e-9d94-9974058e43a5",
                      "parentUUID": "e4e2a622-6b9d-49ba-99ec-3d22b9a5660f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b5520358-d129-4571-8a7e-280158094436",
                    "5a8a57d2-d04f-4f73-8148-51a0631cfff1",
                    "a58843c0-cb12-45b2-82f9-0779cffbc87e"
                  ],
                  "failures": [
                    "85cf7cce-0f4f-4c9a-be78-644bbb791674",
                    "e61909e8-a8b3-411b-a07d-e1337639e209",
                    "ccb15022-004f-416e-9d94-9974058e43a5"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 38,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8999ad03-5ae3-4ebb-b98f-ae10a021f70c",
                  "title": "For Invalid BUName of type String",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for BUName 001323",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName of type String should throw error for BUName 001323",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Invalid value');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {},
                      "uuid": "36d9ad72-7276-4ead-9dda-b7086970cd33",
                      "parentUUID": "8999ad03-5ae3-4ebb-b98f-ae10a021f70c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName A",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName of type String should throw error for BUName A",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Invalid value');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {},
                      "uuid": "db8075b3-d29b-4f0e-b128-edd6586ee997",
                      "parentUUID": "8999ad03-5ae3-4ebb-b98f-ae10a021f70c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName null",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName of type String should throw error for BUName null",
                      "timedOut": false,
                      "duration": 6,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Invalid value');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'BURPID' == 'BUName'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'BURPID' == 'BUName'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:266:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- BURPID\n+ BUName\n"
                      },
                      "uuid": "fda41c4c-4f25-4bab-bf6d-5bcda2162da0",
                      "parentUUID": "8999ad03-5ae3-4ebb-b98f-ae10a021f70c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName undefined",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName of type String should throw error for BUName undefined",
                      "timedOut": false,
                      "duration": 8,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Invalid value');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'BURPID' == 'BUName'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'BURPID' == 'BUName'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:266:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- BURPID\n+ BUName\n"
                      },
                      "uuid": "a34daed0-a20a-4f39-8e9f-5e0c31da036f",
                      "parentUUID": "8999ad03-5ae3-4ebb-b98f-ae10a021f70c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for BUName error",
                      "fullTitle": "BU Test module BU Edit For Invalid BUName of type String should throw error for BUName error",
                      "timedOut": false,
                      "duration": 7,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BUName\"] = BUName;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        assert.equal(res.body.error[0].msg, 'Invalid value');\n        assert.equal(res.body.error[0].param, 'BUName')\n    })",
                      "err": {
                        "message": "AssertionError: 'BURPID' == 'BUName'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'BURPID' == 'BUName'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:266:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- BURPID\n+ BUName\n"
                      },
                      "uuid": "16b304e7-806c-4603-80e3-c25df015b3ce",
                      "parentUUID": "8999ad03-5ae3-4ebb-b98f-ae10a021f70c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "36d9ad72-7276-4ead-9dda-b7086970cd33",
                    "db8075b3-d29b-4f0e-b128-edd6586ee997"
                  ],
                  "failures": [
                    "fda41c4c-4f25-4bab-bf6d-5bcda2162da0",
                    "a34daed0-a20a-4f39-8e9f-5e0c31da036f",
                    "16b304e7-806c-4603-80e3-c25df015b3ce"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 32,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c2dfa9ce-68ad-40b7-80c7-bf9246576f0f",
                  "title": "For Invalid buId",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for buid null",
                      "fullTitle": "BU Test module BU Edit For Invalid buId should throw error for buid null",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buId\"] = buId;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {
                        "message": "AssertionError: 'BURPID' == 'buId'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'BURPID' == 'buId'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:289:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- BURPID\n+ buId\n"
                      },
                      "uuid": "4c7bf381-0abc-46d5-aee6-2c6025a40295",
                      "parentUUID": "c2dfa9ce-68ad-40b7-80c7-bf9246576f0f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for buid function Error() { [native code] }",
                      "fullTitle": "BU Test module BU Edit For Invalid buId should throw error for buid function Error() { [native code] }",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buId\"] = buId;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {
                        "message": "AssertionError: 'BURPID' == 'buId'",
                        "estack": "AssertionError [ERR_ASSERTION]: 'BURPID' == 'buId'\n    at /media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js:289:36\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)",
                        "diff": "- BURPID\n+ buId\n"
                      },
                      "uuid": "8201f48b-838c-4c9d-8adb-1d7d857146fb",
                      "parentUUID": "c2dfa9ce-68ad-40b7-80c7-bf9246576f0f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for buid Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "fullTitle": "BU Test module BU Edit For Invalid buId should throw error for buid Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buId\"] = buId;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "753e77ae-5499-4207-bccb-485613182004",
                      "parentUUID": "c2dfa9ce-68ad-40b7-80c7-bf9246576f0f",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for buid undefined",
                      "fullTitle": "BU Test module BU Edit For Invalid buId should throw error for buid undefined",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buId\"] = buId;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "6bd574e7-8450-4dfe-a291-70a6178b1277",
                      "parentUUID": "c2dfa9ce-68ad-40b7-80c7-bf9246576f0f",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for buid [object Object]",
                      "fullTitle": "BU Test module BU Edit For Invalid buId should throw error for buid [object Object]",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buId\"] = buId;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "fe4091ec-8f71-4926-941b-02c3084ab60c",
                      "parentUUID": "c2dfa9ce-68ad-40b7-80c7-bf9246576f0f",
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for buid 123",
                      "fullTitle": "BU Test module BU Edit For Invalid buId should throw error for buid 123",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buId\"] = buId;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "a492488f-87e3-418f-90db-0bc95d437d74",
                      "parentUUID": "c2dfa9ce-68ad-40b7-80c7-bf9246576f0f",
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "4c7bf381-0abc-46d5-aee6-2c6025a40295",
                    "8201f48b-838c-4c9d-8adb-1d7d857146fb"
                  ],
                  "pending": [],
                  "skipped": [
                    "753e77ae-5499-4207-bccb-485613182004",
                    "6bd574e7-8450-4dfe-a291-70a6178b1277",
                    "fe4091ec-8f71-4926-941b-02c3084ab60c",
                    "a492488f-87e3-418f-90db-0bc95d437d74"
                  ],
                  "duration": 10,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "daf4f219-9036-47a9-b6a2-29a2f99be3e4",
                  "title": "For Invalid buId of Type String",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for buid 001323",
                      "fullTitle": "BU Test module BU Edit For Invalid buId of Type String should throw error for buid 001323",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buIdD\"] = buId\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "75c5f342-16cb-4df9-b299-fba6b3536b60",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for buid A",
                      "fullTitle": "BU Test module BU Edit For Invalid buId of Type String should throw error for buid A",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buIdD\"] = buId\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "9197601b-e10a-42d2-a914-b5c6a5500237",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for buid null",
                      "fullTitle": "BU Test module BU Edit For Invalid buId of Type String should throw error for buid null",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buIdD\"] = buId\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "7ad8a079-13d9-4b80-8efe-576856ac1955",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for buid undefined",
                      "fullTitle": "BU Test module BU Edit For Invalid buId of Type String should throw error for buid undefined",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buIdD\"] = buId\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "72d1ec2f-18fa-46f6-9a1e-c5937f9a4189",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for buid error",
                      "fullTitle": "BU Test module BU Edit For Invalid buId of Type String should throw error for buid error",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"buIdD\"] = buId\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'buId')\n    })",
                      "err": {},
                      "uuid": "ffd9d9fe-3618-4283-836d-ca2d419ad468",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "75c5f342-16cb-4df9-b299-fba6b3536b60",
                    "9197601b-e10a-42d2-a914-b5c6a5500237",
                    "7ad8a079-13d9-4b80-8efe-576856ac1955",
                    "72d1ec2f-18fa-46f6-9a1e-c5937f9a4189",
                    "ffd9d9fe-3618-4283-836d-ca2d419ad468"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a6afd64a-c04b-44ca-a432-fc28e1983c74",
                  "title": "For Invalid BURPID",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for BURPID null",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID should throw error for BURPID null",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "28a04441-b0b7-4161-acd1-3f1b6c738ca8",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID function Error() { [native code] }",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID should throw error for BURPID function Error() { [native code] }",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "ea2a0d69-27ca-4a31-8d77-a34bdd19ef32",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID should throw error for BURPID Sun Jul 12 2020 22:45:31 GMT+0530 (India Standard Time)",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "51391381-ad28-4137-9f96-3aef9705ece5",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID undefined",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID should throw error for BURPID undefined",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "76b3ee55-01dc-4052-b2ae-2f5b053b5ed0",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID [object Object]",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID should throw error for BURPID [object Object]",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "e48f929a-7c5e-4e40-b9c1-b95a95fb0928",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID 123",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID should throw error for BURPID 123",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID;\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'Email id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "89cb3413-ad36-4aa9-833f-d935b4e5356b",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "28a04441-b0b7-4161-acd1-3f1b6c738ca8",
                    "ea2a0d69-27ca-4a31-8d77-a34bdd19ef32",
                    "51391381-ad28-4137-9f96-3aef9705ece5",
                    "76b3ee55-01dc-4052-b2ae-2f5b053b5ed0",
                    "e48f929a-7c5e-4e40-b9c1-b95a95fb0928",
                    "89cb3413-ad36-4aa9-833f-d935b4e5356b"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "69f2fcfe-4318-4764-b6f5-005dd861e5a2",
                  "title": "For Invalid BURPID of Type String",
                  "fullFile": "/media/krunal/Data/Code/Projects/office/scms/backend/test/butest.js",
                  "file": "/test/butest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should throw error for BURPID 001323",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID of Type String should throw error for BURPID 001323",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "3e9c0691-f4ec-4502-9c55-6fd6bb017a8d",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID A",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID of Type String should throw error for BURPID A",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "cfc68a55-dd75-4c98-b760-a929627fc4f3",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID null",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID of Type String should throw error for BURPID null",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "74aa0da2-a769-4cc7-a18a-c7eee8fd0071",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID undefined",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID of Type String should throw error for BURPID undefined",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "e5e7d3dc-5e14-4b52-96f7-e92c733f2af7",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should throw error for BURPID error",
                      "fullTitle": "BU Test module BU Edit For Invalid BURPID of Type String should throw error for BURPID error",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "addReq[\"BURPID\"] = BURPID\nreturn baseURL.post('/bu/update')\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .send(addReq)\n    .expect(400)\n    .expect('Content-Type', 'application/json; charset=utf-8')\n    .then(res => {\n        console.log(\"Ye aana chaiye\", res.body)\n        expect(res.body).to.haveOwnProperty('message')\n        //assert.equal(res.body.message, 'Validation failed');\n        expect(res.body).to.haveOwnProperty('error');\n        //assert.equal(res.body.error[0].msg, 'BUID id is required');\n        assert.equal(res.body.error[0].param, 'BURPID')\n    })",
                      "err": {},
                      "uuid": "1b64d121-07cf-4b9b-bb89-0bc0410e2318",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "3e9c0691-f4ec-4502-9c55-6fd6bb017a8d",
                    "cfc68a55-dd75-4c98-b760-a929627fc4f3",
                    "74aa0da2-a769-4cc7-a18a-c7eee8fd0071",
                    "e5e7d3dc-5e14-4b52-96f7-e92c733f2af7",
                    "1b64d121-07cf-4b9b-bb89-0bc0410e2318"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "7bf3fd7e-1c82-4d98-ac1a-bc9f0c161020",
        "0ce458e9-af5c-414f-91f9-fd7c66dc3116",
        "ef07c70a-aa64-470c-8ce3-840241313678",
        "98316fee-750a-4c3b-be0c-e741e1415490",
        "efd66714-8a53-42a1-b60f-192d3a641f5a",
        "79f73578-2efd-45ed-b9d7-e74682f90a00"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportDir": "testOut"
      },
      "version": "5.1.0"
    }
  }
}