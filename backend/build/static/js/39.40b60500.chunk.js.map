{"version":3,"sources":["contant/custom.js","dashboard/UsersTable/UsersEditForm.js"],"names":["WEB_URL","BasicForms","state","userId","undefined","props","location","res","_id","bu","BUID","buValid","buInvalid","BUName","buArr","userType","name","email","fetchBu","e","fetch","then","response","json","data","setState","catch","err","fetchUserType","utArr","console","log","handleUserTypeChange","target","value","userTypeValid","userTypeInvalid","handleBuChange","text","handleNameChange","match","nameValid","nameInvalid","handleEmailChange","test","emailValid","emailInvalid","handleSubmit","alert","params","dataRequest","message","show","error","handleReset","this","URL","method","headers","body","JSON","stringify","status","history","push","optionItems","map","key","optionItemsut","xs","action","encType","className","row","md","htmlFor","style","color","type","id","placeholder","autoComplete","valid","invalid","onChange","custom","size","margin","onClick","to","React","Component","withAlert"],"mappings":"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","file":"static/js/39.40b60500.chunk.js","sourcesContent":["//For Development with react - local db\n// const WEB_URL = \"http://127.0.0.1:5050\" \n\n//For deployment with node - Compile EXE\nconst WEB_URL = \"\"\nexport default WEB_URL;","import React from 'react'\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardFooter,\n    CCardHeader,\n    CCol,\n    CForm,\n    CFormGroup,\n    CFormText,\n    CValidFeedback,\n    CInvalidFeedback,\n    CInput,\n    CLabel,\n    CSelect,\n    CRow,\n    CTextarea\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport WEB_URL from '../../contant/custom';\nimport { withAlert } from 'react-alert';\nimport { Link } from 'react-router-dom';\n\nclass BasicForms extends React.Component {\n    state = {\n        userId: this.props.location.res == (null || undefined) ? \"\" : this.props.location.res._id,\n\n        bu: this.props.location.res == (null || undefined) ? \"\" : this.props.location.res.BUID,\n        buValid: false,\n        buInvalid: false,\n        BUName: \"\",\n        buArr: [],\n\n        BUName : this.props.location.res == (null || undefined) ? \"\" : this.props.location.res.BUName,\n\n        BUID: this.props.location.res == (null || undefined) ? \"\" : this.props.location.res.BUID,\n\n        userType: this.props.location.res == (null || undefined) ? \"\" : this.props.location.res.userType,\n        utArr: [],\n\n        name: this.props.location.res == (null || undefined) ? \"\" : this.props.location.res.name,\n\n        email: this.props.location.res == (null || undefined) ? \"\" : this.props.location.res.email,\n\n    }\n\n    componentDidMount() {\n        this.fetchBu();\n        this.fetchUserType();\n        //console.log(\"PROPS OF ADMIN\", this.props)\n    }\n\n    /*Api Calls*/\n    dataRequest(URL, params) {\n        return fetch(WEB_URL + URL, {\n            method: 'POST',\n            'credentials': 'include',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(params)\n        })\n            .then(data => {\n                if (data.status == 401) {\n                    this.props.history.push('/login');\n                }\n                else if (data.status == 403) {\n                    this.props.history.push('/login');\n                }\n                return data.json()\n            })\n            .catch(err => {\n                return err\n            })\n    }\n\n\n    fetchBu = (e) => {\n\n        fetch(WEB_URL + \"/bu/fetch\")\n            .then(response => response.json())\n            .then(data => {\n                if (data.data != (null || undefined) && data.data) {\n                    this.setState({\n                        buArr: data.data\n                    })\n                }\n            })\n            .catch(err => {\n\n            })\n    }\n\n    fetchUserType = (e) => {\n\n        fetch(WEB_URL + \"/types/ut\")\n            .then(response => response.json())\n            .then(data => {\n                if (data.data != (null || undefined) && data.data) {\n                    this.setState({\n                        utArr: data.data\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(\"User type Fetch Array\", err);\n            })\n    }\n\n    handleUserTypeChange = (e) => {\n        if (e.target.value != \"\" && e.target.value != \"Please select\") {\n            // let userType = \"Team Member\";\n            // if (e.target.value == \"Team Representative\") {\n            //     userType = \"Team Representative\";\n            // }\n            // else if (e.target.value == \"Team Member\") {\n            //     userType = \"Team Member\";\n            // }\n            // else if (e.target.value == \"Management\") {\n            //     userType = \"Management\";\n            // }\n            this.setState({\n                // sendBacktype: userType,\n                userType: e.target.value,\n                userTypeValid: true,\n                userTypeInvalid: false\n            })\n        }\n        else {\n            this.setState({\n                userTypeInvalid: true,\n                userTypeValid: false\n            })\n        }\n    }\n\n    handleBuChange = (e) => {\n        console.log(\"****\", e.target.value)\n        if (e.target.value != \"\" && e.target.value != \"Please Select BU\") {\n            this.setState({\n                bu: e.target.value,\n                BUName: e.target.value.text,\n                buValid: true,\n                buInvalid: false\n            })\n        }\n        else {\n            this.setState({\n                bu: \"\",\n                BUName: \"\",\n                buValid: false,\n                buInvalid: true\n            })\n        }\n    }\n\n    handleNameChange = (e) => {\n        var letters = /^[a-zA-Z-,]+(\\s{0,1}[a-zA-Z-, ])*$/;\n        if (e.target.value != \"\" && e.target.value != null && e.target.value.match(letters)) {\n            this.setState({\n                name: e.target.value,\n                nameValid: true,\n                nameInvalid: false\n            })\n        }\n        else {\n            this.setState({\n                name: \"\",\n                nameValid: false,\n                nameInvalid: true\n            })\n        }\n    }\n\n    handleEmailChange = (e) => {\n        let filter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,15})+$/;\n\n        if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,15})+$/.test(e.target.value)) {\n            //console.log(\"inside email change\")\n            this.setState({\n                email: e.target.value,\n                emailValid: true,\n                emailInvalid: false\n            })\n        }\n        else {\n            //console.log(\"inside email change\", e.target.value)\n            this.setState({\n                email: e.target.value,\n                emailInvalid: true,\n                emailValid: false\n            })\n        }\n    }\n\n    handleSubmit = () => {\n        const alert = this.props.alert;\n        console.log(\"state on submit\", this.state)\n        if (\n            // true\n            // this.state.emailValid && \n            // this.state.nameValid &&\n            // this.state.buValid && \n            // this.state.userTypeValid && \n            // this.state.bu != \"\" &&\n            // this.state.userType != \"\" &&\n            // this.state.email != \"\" &&\n            // this.state.name != \"\"\n\n            this.state.name != null && this.state.name != undefined && this.state.name != \"\" &&\n            this.state.bu != null && this.state.bu != undefined && this.state.bu != \"\" &&\n            this.state.userType != null && this.state.userType != undefined && this.state.userType != \"\" &&\n            this.state.email != null && this.state.email != undefined && this.state.email != \"\"\n\n        ) {\n            console.log(\"bu\", this.state.bu)\n            let params = {};\n            params.userId = this.state.userId;\n            params.userType = this.state.userType;\n            params.email = this.state.email;\n            params.name = this.state.name;\n            params.BUID = this.state.bu;\n            params.BUName = this.state.BUName;\n            // params.bu = this.state.bu;\n\n\n            //assign parvam\n            this.dataRequest('/user/update', params)\n                .then(data => {\n                    if (data.message != undefined) {\n                        alert.show(data.message);\n                    }\n                    else {\n                        alert.show(\"Internal Server Error !\")\n                    }\n                })\n                .catch(error => {\n                    alert.show(\"Oops, Something went wrong!\")\n                })\n        }\n        else {\n            console.log(\"inside else\")\n            alert.show(\"Please fill all the required fields\")\n        }\n    }\n\n    handleReset = () => {\n        console.log(\"reset\", this.state)\n        this.setState({\n\n            userType: \"\",\n            userTypeValid: false,\n            userTypeInvalid: false,\n\n            bu: \"\",\n            buValid: false,\n            buInvalid: false,\n\n            name: \"\",\n            nameValid: false,\n            nameInvalid: false,\n\n            email: \"\",\n            emailInvalid: false,\n            emailValid: false,\n\n        }, () => {\n            console.log(\"reset1\", this.state)\n        })\n    }\n\n    render() {\n\n        let buArr = this.state.buArr;\n        let optionItems = buArr.map((res) =>\n            <option key={res._id} value={res._id}>{res.BUName}</option>\n        );\n\n        let utArr = this.state.utArr;\n        let optionItemsut = utArr.map((res) => {\n            console.log(res)\n            return <option key={res}>{res}</option>\n        }\n        );\n\n        return (\n            <>\n                <CCard>\n                    <CCardHeader>\n                        Edit User Details\n                    </CCardHeader>\n                    <CCardBody>\n                        <CCol xs=\"3\">\n\n                        </CCol>\n                        <CCol xs=\"7\">\n                            <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"email-input\">Name<span style={{ color: 'red' }}>*</span></CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CInput\n                                            type=\"text\"\n                                            id=\"tex1-input\"\n                                            name=\"text1-input\"\n                                            placeholder=\"Enter User's Name\"\n                                            autoComplete=\"tex1\"\n                                            value={this.state.name}\n                                            valid={this.state.nameValid}\n                                            invalid={this.state.nameInvalid}\n                                            onChange={e => this.handleNameChange(e)}\n                                        />\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>Please Enter a Valid Name!</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"select\">Business Unit:</CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CSelect\n                                            custom\n                                            name=\"select\"\n                                            id=\"select\"\n                                            value={this.state.bu}\n                                            valid={this.state.buValid}\n                                            invalid={this.state.buInvalid}\n                                            onChange={e => this.handleBuChange(e)}\n                                        >\n                                            {console.log(\"bu state\", this.state.bu)}\n                                            <option>Please Select BU</option>\n                                            {/* <option>{this.state.bu != \"\" ? this.state.BUName : \"Please select BU\"}</option> */}\n                                            {optionItems}\n                                        </CSelect>\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>This field is required!</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"text-input\">User Type<span style={{ color: 'red' }}>*</span></CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CSelect\n                                            custom\n                                            name=\"select\"\n                                            id=\"select2\"\n                                            value={this.state.userType}\n                                            valid={this.state.userTypeValid}\n                                            invalid={this.state.userTypeInvalid}\n                                            onChange={e => this.handleUserTypeChange(e)}\n                                        >\n                                            {/* <option>Please Select</option>\n                                            <option>Team Representative</option>\n                                            <option>Team Member</option>\n                                            <option>Management</option> */}\n                                            <option>{this.state.userType != \"\" ? this.state.userType : \"Please select User Type\"}</option>\n                                            {optionItemsut}\n                                        </CSelect>\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>This field is required!</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                                <CFormGroup row>\n                                    <CCol md=\"3\">\n                                        <CLabel htmlFor=\"email-input\">EmailID<span style={{ color: 'red' }}>*</span></CLabel>\n                                    </CCol>\n                                    <CCol xs=\"12\" md=\"9\">\n                                        <CInput\n                                            type=\"text\"\n                                            id=\"email-input\" name=\"email-input\"\n                                            placeholder=\"Enter Email Address\"\n                                            autoComplete=\"email\"\n                                            value={this.state.email}\n                                            valid={this.state.emailValid}\n                                            invalid={this.state.emailInvalid}\n                                            onChange={e => this.handleEmailChange(e)}\n                                        />\n                                        <CValidFeedback>Looks Good!</CValidFeedback>\n                                        <CInvalidFeedback>Please Enter Valid Email</CInvalidFeedback>\n                                    </CCol>\n                                </CFormGroup>\n\n                            </CForm></CCol>\n\n                    </CCardBody>\n                    <CCardFooter>\n                        <CButton\n                            type=\"submit\"\n                            size=\"sm\" color=\"primary\" style={{ margin: \"3px\" }}\n                            onClick={this.handleSubmit}\n                        >\n                            {/* <CIcon name=\"cil-scrubber\" /> */}\n                            Submit\n                        </CButton>\n\n                        <CButton\n                            type=\"reset\"\n                            size=\"sm\" color=\"danger\" style={{ margin: \"3px\" }}\n                            onClick={this.handleReset}\n                        >\n                            {/* <CIcon name=\"cil-ban\" /> */}\n                            Reset\n                        </CButton>\n\n                        <Link to=\"/usersTable\">\n                            <CButton\n                                size=\"sm\" color=\"dark\" style={{ margin: \"3px\" }}\n                            // href=\"/src/dashboard/UsersTable#/usersTable\"\n                            >\n                                Back\n                        </CButton>\n                        </Link>\n                    </CCardFooter>\n                </CCard>\n            </>\n        )\n    }\n\n}\n\n\nexport default withAlert()(BasicForms);"],"sourceRoot":""}