{"version":3,"sources":["contant/custom.js","dashboard/TicketTable/demo-data/generator.js","dashboard/TicketTable/TicketTable.js","dashboard/TicketTable/demo-data/random.js"],"names":["WEB_URL","femaleFirstNames","maleFirstNames","lastNames","cities","cars","defaultColumnValues","gender","name","Male","Female","city","car","map","i","firstName","lastName","model","abbr","state","styles","input","paddingLeft","fontSize","width","label","container","maxWidth","button","paddingRight","height","selector","onSave","workbook","xlsx","writeBuffer","then","buffer","saveAs","Blob","type","ModeSelector","withStyles","props","defaultValue","changeMode","classes","Grid","alignItems","className","ResetWidthButton","resetWidths","Button","onClick","variant","size","ResizingPanel","to","color","style","margin","RowDetail","row","Card","body","ticketNo","ticketType","bu","buTr","validity","concernedEngg","warrantyStatus","customerName","customerAddress","complains","mobileNo","email","ticketStatus","startDate","dueDate","modeOfSupport","priority","actionTaken","reasonForDelay","closingDate","exporterRef","useRef","startExport","useCallback","current","exportGrid","ce","ws","wsExport","edit","push","useState","title","columns","columnValues","length","random","seed","mW","mZ","mask","result","randomSeed","data","Object","keys","record","forEach","column","values","value","Math","floor","index","generateRows","rows","updateRows","exportColumns","exportRows","updateExportRows","useEffect","callApi","fetch","method","headers","JSON","stringify","response","json","undefined","Array","isArray","modifyRows","catch","error","console","ticketStatusExport","modifiedRow","modifiedRowExport","iterator","pathname","log","res","j","status","customerEmail","customerMNo","BUName","teamRepresentativeName","isValid","inWarranty","customerComplain","remarks","delayReason","assignedMemberName","moment","format","columnName","tableColumnExtensions","expandedRowIds","setExpandedRowIds","leftColumns","rightColumns","currentPage","setCurrentPage","pageSize","setPageSize","pageSizes","searchValue","setSearchState","columnWidths","setColumnWidths","resizingMode","setResizingMode","Paper","marginTop","defaultSorting","direction","onCurrentPageChange","onPageSizeChange","onValueChange","onExpandedRowIdsChange","columnExtensions","onColumnWidthsChange","showSortingControls","contentComponent","ref"],"mappings":"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","file":"static/js/11.1b51b849.chunk.js","sourcesContent":["//For Development with react - local db\n// const WEB_URL = \"http://127.0.0.1:5050\" \n\n//For deployment with node - Compile EXE\nconst WEB_URL = \"\"\nexport default WEB_URL;","import randomSeed from './random';\n\nconst femaleFirstNames = ['Mary', 'Linda', 'Barbara', 'Maria', 'Lisa', 'Nancy', 'Betty', 'Sandra', 'Sharon'];\nconst maleFirstNames = ['James', 'John', 'Robert', 'William', 'David', 'Richard', 'Thomas', 'Paul', 'Mark'];\nconst lastNames = [\n  'Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Johnson', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson',\n  'Thomas', 'Jackson', 'Williams', 'White', 'Harris', 'Davis', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark',\n];\nconst usStates = [\n  { name: 'Alabama', abbr: 'AL' },\n  { name: 'Alaska', abbr: 'AK' },\n  { name: 'American Samoa', abbr: 'AS' },\n  { name: 'Arizona', abbr: 'AZ' },\n  { name: 'Arkansas', abbr: 'AR' },\n  { name: 'California', abbr: 'CA' },\n  { name: 'Colorado', abbr: 'CO' },\n  { name: 'Connecticut', abbr: 'CT' },\n  { name: 'Delaware', abbr: 'DE' },\n  { name: 'District Of Columbia', abbr: 'DC' },\n  { name: 'Federated States Of Micronesia', abbr: 'FM' },\n  { name: 'Florida', abbr: 'FL' },\n  { name: 'Georgia', abbr: 'GA' },\n  { name: 'Guam', abbr: 'GU' },\n  { name: 'Hawaii', abbr: 'HI' },\n  { name: 'Idaho', abbr: 'ID' },\n  { name: 'Illinois', abbr: 'IL' },\n  { name: 'Indiana', abbr: 'IN' },\n  { name: 'Iowa', abbr: 'IA' },\n  { name: 'Kansas', abbr: 'KS' },\n  { name: 'Kentucky', abbr: 'KY' },\n  { name: 'Louisiana', abbr: 'LA' },\n  { name: 'Maine', abbr: 'ME' },\n  { name: 'Marshall Islands', abbr: 'MH' },\n  { name: 'Maryland', abbr: 'MD' },\n  { name: 'Massachusetts', abbr: 'MA' },\n  { name: 'Michigan', abbr: 'MI' },\n  { name: 'Minnesota', abbr: 'MN' },\n  { name: 'Mississippi', abbr: 'MS' },\n  { name: 'Missouri', abbr: 'MO' },\n  { name: 'Montana', abbr: 'MT' },\n  { name: 'Nebraska', abbr: 'NE' },\n  { name: 'Nevada', abbr: 'NV' },\n  { name: 'New Hampshire', abbr: 'NH' },\n  { name: 'New Jersey', abbr: 'NJ' },\n  { name: 'New Mexico', abbr: 'NM' },\n  { name: 'New York', abbr: 'NY' },\n  { name: 'North Carolina', abbr: 'NC' },\n  { name: 'North Dakota', abbr: 'ND' },\n  { name: 'Northern Mariana Islands', abbr: 'MP' },\n  { name: 'Ohio', abbr: 'OH' },\n  { name: 'Oklahoma', abbr: 'OK' },\n  { name: 'Oregon', abbr: 'OR' },\n  { name: 'Palau', abbr: 'PW' },\n  { name: 'Pennsylvania', abbr: 'PA' },\n  { name: 'Puerto Rico', abbr: 'PR' },\n  { name: 'Rhode Island', abbr: 'RI' },\n  { name: 'South Carolina', abbr: 'SC' },\n  { name: 'South Dakota', abbr: 'SD' },\n  { name: 'Tennessee', abbr: 'TN' },\n  { name: 'Texas', abbr: 'TX' },\n  { name: 'Utah', abbr: 'UT' },\n  { name: 'Vermont', abbr: 'VT' },\n  { name: 'Virgin Islands', abbr: 'VI' },\n  { name: 'Virginia', abbr: 'VA' },\n  { name: 'Washington', abbr: 'WA' },\n  { name: 'West Virginia', abbr: 'WV' },\n  { name: 'Wisconsin', abbr: 'WI' },\n  { name: 'Wyoming', abbr: 'WY' },\n];\nconst cities = ['New York', 'Los Angeles', 'Chicago', 'Las Vegas', 'Austin', 'Tokyo', 'Rio de Janeiro', 'London', 'Paris'];\nconst cars = ['Honda Civic', 'Toyota Corolla', 'Chevrolet Cruze', 'Honda Accord', 'Nissan Altima', 'Kia Optima', 'Audi A4', 'BMW 750'];\nconst positions = ['CEO', 'IT Manager', 'Ombudsman', 'CMO', 'Controller', 'HR Manager', 'Shipping Manager', 'Sales Assistant', 'HR Assistant'];\n\nconst generateDate = ({\n  random,\n  year = 2017,\n  month = rand => Math.floor(rand() * 12),\n  day = rand => Math.floor(rand() * 30) + 1,\n}) => {\n  const getPart = part => (typeof part === 'function' ? part(random) : part);\n  const date = new Date(Date.UTC(getPart(year), getPart(month), getPart(day)));\n  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n};\n\nconst generatePhone = () => Math.random().toString().slice(2, 12).replace(/(\\d{3})(\\d{3})(\\d{4})$/, '($1) $2-$3');\n\nexport const defaultColumnValues = {\n  gender: ['Male', 'Female'],\n  name: [\n    'gender',\n    {\n      Male: maleFirstNames,\n      Female: femaleFirstNames,\n    },\n  ],\n  city: cities,\n  car: cars,\n};\n\nexport const defaultNestedColumnValues = {\n  user: [\n    ...[...maleFirstNames, ...femaleFirstNames].map((name, i) => ({\n      firstName: name,\n      lastName: lastNames[i],\n    })),\n  ],\n  position: positions,\n  city: cities,\n  car: cars.map(car => ({ model: car })),\n};\n\nexport const globalSalesValues = {\n  region: ['Asia', 'Europe', 'North America', 'South America', 'Australia', 'Africa'],\n  sector: ['Energy', 'Health', 'Manufacturing', 'Insurance', 'Banking', 'Telecom'],\n  channel: ['Resellers', 'Retail', 'VARs', 'Consultants', 'Direct', 'Telecom'],\n  units: ({ random }) => Math.floor(random() * 4) + 1,\n  customer: [\n    'Renewable Supplies', 'Energy Systems', 'Environment Solar', 'Beacon Systems', 'Apollo Inc',\n    'Gemini Stores', 'McCord Builders', 'Building M Inc', 'Global Services',\n    'Market Eco', 'Johnson & Assoc', 'Get Solar Inc', 'Supply Warehouse', 'Discovery Systems', 'Mercury Solar'],\n  product: ['SolarMax', 'SolarOne', 'EnviroCare', 'EnviroCare Max'],\n  amount: ({ random }) => (Math.floor((random() * 1000000) + 1000) / 20),\n  discount: ({ random }) => Math.round(random() * 0.5 * 1000) / 1000,\n  saleDate: ({ random }) => generateDate({\n    random,\n    year: 2016,\n    month: () => Math.floor(random() * 3) + 1,\n  }),\n  shipped: [true, false],\n};\n\nexport const employeeValues = {\n  gender: ['Male', 'Female'],\n  prefix: [\n    'gender',\n    {\n      Male: ['Mr.', 'Dr.'],\n      Female: ['Mrs.', 'Ms.', 'Dr.'],\n    },\n  ],\n  firstName: [\n    'gender',\n    {\n      Male: maleFirstNames,\n      Female: femaleFirstNames,\n    },\n  ],\n  lastName: lastNames,\n  position: positions,\n  state: usStates.map(state => state.name),\n  birthDate: ({ random }) => generateDate({\n    random,\n    year: () => Math.floor(random() * 30) + 1960,\n  }),\n  phone: generatePhone,\n};\n\nexport const employeeTaskValues = {\n  priority: ['High', 'Low', 'Normal'],\n  status: ['Completed', 'In Progress', 'Deferred', 'Need Assistance'],\n  subject: [\n    'Choose between PPO and HMO Health Plan',\n    'Google AdWords Strategy',\n    'New Brochures',\n    'Update NDA Agreement',\n    'Review Product Recall Report by Engineering Team',\n    'Update Personnel Files',\n    'Review Health Insurance Options Under the Affordable Care Act',\n    'Non-Compete Agreements',\n    'Give Final Approval for Refunds',\n    'Deliver R&D Plans',\n    'Decide on Mobile Devices to Use in the Field',\n    'Try New Touch-Enabled Apps',\n    'Approval on Converting to New HDMI Specification',\n    'Approve Hiring',\n    'Update Employee Files with New NDA',\n    'Provide New Health Insurance Docs',\n    'Prepare 3013 Marketing Plan',\n    'Rollout of New Website and Marketing Brochures',\n    'Review Sales Report and Approve Plans',\n    'Review Site Up-Time Report',\n    'Review HR Budget Company Wide',\n    'Final Budget Review',\n    'Sign Updated NDA',\n    'Review Overtime Report',\n    'Upgrade Server Hardware',\n    'Upgrade Personal Computers',\n    'Prepare Financial',\n    'Update Revenue Projections',\n    'Submit D&B Number to ISP for Credit Approval',\n    'Update Sales Strategy Documents',\n    'Refund Request Template',\n  ],\n  startDate: ({ random }) => generateDate({\n    random,\n    year: 2016,\n  }),\n  dueDate: ({ random, record }) => generateDate({\n    random,\n    year: 2016,\n    month: () => Math.floor(random() * 2) + (new Date(record.startDate)).getMonth(),\n  }),\n};\n\nexport function generateRows({\n  columnValues = defaultColumnValues,\n  length,\n  random = randomSeed(329972281),\n}) {\n  const data = [];\n  const columns = Object.keys(columnValues);\n\n  for (let i = 0; i < length; i += 1) {\n    const record = {};\n\n    columns.forEach((column) => {\n      let values = columnValues[column];\n\n      if (typeof values === 'function') {\n        record[column] = values({ random, index: i, record });\n        return;\n      }\n\n      while (values.length === 2 && typeof values[1] === 'object') {\n        values = values[1][record[values[0]]];\n      }\n\n      const value = values[Math.floor(random() * values.length)];\n      if (typeof value === 'object') {\n        record[column] = { ...value };\n      } else {\n        record[column] = value;\n      }\n    });\n\n    data.push(record);\n  }\n\n  return data;\n}\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { GridExporter } from '@devexpress/dx-react-grid-export';\nimport {\n    Grid, VirtualTable, TableHeaderRow, TableFixedColumns, PagingPanel, Toolbar, SearchPanel,\n    ExportPanel, TableColumnResizing, TableRowDetail\n} from '@devexpress/dx-react-grid-material-ui';\nimport { SortingState, IntegratedSorting, PagingState, IntegratedPaging, SearchState, RowDetailState,  IntegratedFiltering } from '@devexpress/dx-react-grid';\nimport { CBadge, CButton } from '@coreui/react';\nimport { Card, ToggleButton } from 'react-bootstrap';\nimport { withStyles } from '@material-ui/core/styles';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport GridMUI from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Plugin, Template, TemplatePlaceholder, } from '@devexpress/dx-react-core';\nimport { Link } from 'react-router-dom';\nimport { generateRows } from './demo-data/generator';\nimport saveAs from 'file-saver';\nimport { Loading } from '../TicketTable/theme-sources/material-ui/components/loading';\nimport WEB_URL from '../../contant/custom';\nimport CIcon from '@coreui/icons-react';\nimport './TicketTable.css';\nimport moment from 'moment';\n//styling on the table\nconst styles = () => ({\n    input: {\n        paddingLeft: '8px',\n        fontSize: '14px',\n        width: '78px',\n    },\n    label: {\n        fontSize: '14px',\n    },\n    container: {\n        maxWidth: '17em',\n    },\n    button: {\n        fontSize: '14px',\n        paddingLeft: '8px',\n        paddingRight: '8px',\n        height: '35px',\n    },\n    selector: {\n        height: '35px',\n    },\n});\n\n//Export functionality:\nconst onSave = (workbook) => {\n    workbook.xlsx.writeBuffer().then((buffer) => {\n        saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'TicketData.xlsx');\n    });\n};\n\n\n\n// #FOLD_BLOCK\nconst ModeSelectorBase = (props) => {\n    const { defaultValue, changeMode, classes } = props;\n    return (\n        <GridMUI\n            container\n            alignItems=\"center\"\n            className={classes.container}\n        >\n            {/* <Typography\n                className={classes.label}\n            >\n                Column Resizing Mode:\n                &nbsp;\n        </Typography> */}\n            {/* <Select\n                onChange={e => changeMode(e.target.value)}\n                value={defaultValue}\n                className={classes.selector}\n                input={(\n                    <OutlinedInput\n                        classes={{ input: classes.input }}\n                        labelWidth={0}\n                        margin=\"dense\"\n                    />\n                )}\n            >\n                <MenuItem value=\"widget\">Widget</MenuItem>\n                <MenuItem value=\"nextColumn\">NextColumn</MenuItem>\n            </Select> */}\n        </GridMUI>\n    );\n};\nconst ModeSelector = withStyles(styles, { name: 'ModeSelector' })(ModeSelectorBase);\n\n// #FOLD_BLOCK\nconst ResetWidthButtonBase = (props) => {\n    const { resetWidths, classes } = props;\n    return (\n        <Button\n            onClick={resetWidths}\n            variant=\"outlined\"\n            size=\"medium\"\n            className={classes.button}\n        >\n            Reset\n        </Button>\n    );\n};\nconst ResetWidthButton = withStyles(styles, { name: 'ResetWidthButton' })(ResetWidthButtonBase);\n\nconst ResizingPanel = props => (\n    <Plugin name=\"ResizingPanel\">\n        <Template name=\"toolbarContent\">\n            <ResetWidthButton {...props} />\n            <Link to=\"/adminAddForm\">\n                <CButton color=\"primary\" style={{ margin: \"5px\" }}> Add</CButton>\n            </Link>\n\n            <TemplatePlaceholder />\n            <ModeSelector {...props} />\n        </Template>\n    </Plugin>\n);\n\n\nconst RowDetail = ({ row }) => (\n    <Card body>\n        <div>\n            <b>Ticket No.</b> - {' '} {row.ticketNo} {' '}<br />\n            <b>Ticket Type</b> - {' '} {row.ticketType} {' '}<br />\n            <b>Business Unit</b> - {' '} {row.bu} {' '}<br />\n            <b>Team Representative</b> - {' '} {row.buTr} {' '}<br />\n            <b>Validity</b> - {' '} {row.validity} {' '}<br />\n            <b>Concerned Engineer</b> - {' '} {row.concernedEngg} {' '}<br />\n            <b>Warranty Status</b> - {' '} {row.warrantyStatus} {' '}<br />\n            <b>Customer Name</b> - {' '} {row.customerName} {' '}<br />\n            <b>Customer Address</b> - {' '} {row.customerAddress} {' '}<br />\n            <b>Customer Complains</b> - {' '} {row.complains} {' '}<br />\n            <b>Mobile No</b> - {' '} {row.mobileNo} {' '}<br />\n            <b>Email</b> - {' '} {row.email} {' '}<br />\n            <b>Status</b> - {' '} {row.ticketStatus} {' '}<br />\n            <b>Start Date</b> - {' '} {row.startDate} {' '}<br />\n            <b>Due Date</b> - {' '} {row.dueDate} {' '}<br />\n            <b>Mode Of Support</b> - {' '}{row.modeOfSupport}{' '}<br />\n            <b>Priority</b> - {' '} {row.priority} {' '}<br />\n            <b>Action Taken</b> - {' '} {row.actionTaken} {' '}<br />\n            <b>Reason For Delay</b> - {' '} {row.reasonForDelay} {' '}<br />\n            <b>Closing Date</b> - {' '} {row.closingDate} {' '}<br />\n        </div>\n    </Card>\n);\n\n\n\nexport default () => {\n    const exporterRef = useRef(null);\n\n    const startExport = useCallback(() => {\n        exporterRef.current.exportGrid();\n    }, [exporterRef]);\n\n\n    /*pushing demo data*/\n    const bu = []\n    const ticketNo = []\n    const ce = []\n    const ws = []\n    const wsExport = []\n    const edit = []\n    for (let i = 0; i < 10; i++) {\n        ticketNo.push(\"20\" + i)\n        bu.push(\"PES\")\n        ce.push(\"XYZ\")\n        if (i % 2 == 0) {\n            ws.push(<CBadge color=\"danger\">Out of Warranty</CBadge>)\n            wsExport.push(\"Out of Warranty\")\n        }\n        else {\n            ws.push(<CBadge color=\"success\">In Warranty</CBadge>)\n            wsExport.push(\"In Warranty\")\n        }\n        edit.push(<Link to=\"/trForm\"><CButton color=\"info\">Edit</CButton></Link>)\n    }\n    //END\n\n\n    const [columns] = useState([\n\n        { title: \"Ticket No.\", name: \"ticketNo\" },\n        { title: \"Ticket Type\", name: \"ticketType\" },\n        { title: \"Business Unit\", name: \"bu\" },\n        { title: \"Team Representative\", name: \"buTr\" },\n        { title: \"Concerned Engineer\", name: \"concernedEngg\" },\n        { title: \"Priority\", name: \"priority\" },\n        { title: \"Valid/Invalid\", name: \"validity\" },\n        { title: \"Warranty Status\", name: \"warrantyStatus\" },\n        { title: \"Customer Name\", name: \"customerName\" },\n        { title: \"Customer Address\", name: \"customerAddress\" },\n        { title: \"Customer Complains\", name: \"complains\" },\n        { title: \"Mobile No\", name: \"mobileNo\" },\n        { title: \"Email\", name: \"email\" },\n        { title: \"Status\", name: \"ticketStatus\" },\n        { title: \"Start Date\", name: \"startDate\" },\n        { title: \"Due Date\", name: \"dueDate\" },\n        { title: \"Mode of Support\", name: \"modeOfSupport\" },\n    \n        { title: \"Action Taken\", name: \"actionTaken\" },\n        { title: \"Remarks\", name: \"remarks\" },\n\n        { title: \"Reason For Delay\", name: \"reasonForDelay\" },\n        { title: \"Closing Date\", name: \"closingDate\" },\n        { title: \"Edit\", name: \"action\" },\n\n    ]);\n\n    const [rows, updateRows] = useState(generateRows({'length':3}));\n\n    //  COLUMNS TO BE EXPORTED IN \".xl\" (without edit button)\n    const [exportColumns] = useState([\n        { title: \"Ticket No.\", name: \"ticketNo\" },\n        { title: \"Ticket Type\", name: \"ticketType\" },\n        { title: \"Business Unit\", name: \"bu\" },\n        { title: \"Team Representative\", name: \"buTr\" },\n        { title: \"Concerned Engineer\", name: \"concernedEngg\" },\n        { title: \"Warranty Status\", name: \"inWarrantyExport\" },\n        { title: \"Customer Name\", name: \"customerName\" },\n        { title: \"Customer Address\", name: \"customerAddress\" },\n        { title: \"Valid/Invalid\", name: \"validity\" },\n        { title: \"Customer Complains\", name: \"complains\" },\n        { title: \"Mobile No\", name: \"mobileNo\" },\n        { title: \"Email\", name: \"email\" },\n        { title: \"Status\", name: \"ticketStatusExport\" },\n        { title: \"Start Date\", name: \"startDate\" },\n        { title: \"Due Date\", name: \"dueDate\" },\n        { title: \"Mode of Support\", name: \"modeOfSupport\" },\n        { title: \"Priority\", name: \"priority\" },\n        { title: \"Action Taken\", name: \"actionTaken\" },\n        { title: \"Remarks\", name: \"remarks\" },\n        { title: \"Reason For Delay\", name: \"reasonForDelay\" },\n        { title: \"Closing Date\", name: \"closingDate\" },\n    ]);\n\n    //ROWS TO BE EXPORTED IN \".xl\" (without html tags)\n    const [exportRows, updateExportRows] = useState([]);\n\n    useEffect(() => {\n        callApi()\n    }, []);\n\n\n    const callApi = () => {\n        const data = {};\n        fetch(WEB_URL + '/ticket/fetchTicketData', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data),\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data != null || data != undefined && Array.isArray(data.data)) {\n                    modifyRows(data.data);\n                }\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            })\n    }\n\n    const modifyRows = (data) => {\n        let modifiedRow = [];\n        let modifiedRowExport = [];\n        let iterator = 0;\n        let ticketStatus;\n        let ticketStatusExport;\n        const pathname = [\"/adminForm\", \"/trForm\", \"/tmForm\", \"/buOwnerForm\"]\n        console.log(data);\n        data.map(res => {\n\n            if (res.status == \"Open\") {\n                ticketStatus = <CBadge color=\"primary\">Open</CBadge>;\n                ticketStatusExport = \"Open\";\n            }\n            else if (res.status == \"In Progress\") {\n                ticketStatus = <CBadge color=\"secondary\">In Progress</CBadge>;\n                ticketStatusExport = \"In Progess\";\n            }\n            else if (res.status == \"On Hold\") {\n                ticketStatus = <CBadge color=\"warning\">On hold</CBadge>\n                ticketStatusExport = \"On hold\";\n            }\n            else if (res.status == \"Closed\") {\n                ticketStatus = <CBadge color=\"success\">Closed</CBadge>\n                ticketStatusExport = \"Closed\";\n            }\n            else if (res.status == \"Delayed\") {\n                ticketStatus = <CBadge color=\"danger\">Delayed</CBadge>\n                ticketStatusExport = \"Delayed\";\n            }\n\n            modifiedRow.push({\n                \"ticketNo\": res.ticketNo,\n                \"ticketType\": res.ticketType,\n                \"email\": res.customerEmail,\n                \"customerName\": res.customerName,\n                \"customerAddress\": res.customerAddress,\n                \"mobileNo\": res.customerMNo,\n                \"bu\": res.BUName,\n                \"buTr\": res.teamRepresentativeName,\n                \"validity\": res.isValid == true ? \"Valid\" : \"InValid\",\n                \"warrantyStatus\": res.inWarranty == true ? <CBadge color=\"success\">In Warranty</CBadge> : <CBadge color=\"danger\">Out of Warranty</CBadge>,\n                \"ticketStatus\": ticketStatus,\n                \"priority\": res.priority,\n                \"complains\": res.customerComplain,\n                \"actionTaken\": res.actionTaken,\n                \"remarks\": res.remarks,\n                \"modeOfSupport\": res.modeOfSupport,\n                \"reasonForDelay\": res.delayReason,\n                \"concernedEngg\": res.assignedMemberName,\n                \"startDate\": moment(res.startDate).format('ll'),\n                \"closingDate\": moment(res.closingDate).format('ll'),\n                \"dueDate\": moment(res.dueDate).format('ll'),\n                \"action\":\n                    <>\n                        <Link\n                            to={{\n                                pathname: pathname[0],\n                                res,\n                                ticketStatusExport\n                            }}>\n                            <CButton style={{ margin: \"1px\" }} color=\"primary\">\n                                Edit<br></br><small>(Admin)</small>\n\n                            </CButton>\n                        </Link><br></br>\n\n                        <Link\n                            to={{\n                                pathname: pathname[3],\n                                res,\n                                ticketStatusExport\n                            }}>\n                            <CButton style={{ margin: \"1px\" }} color=\"primary\">\n                                Edit<br></br><small>(buOwer)</small>\n                            </CButton>\n                        </Link><br></br>\n\n                        <Link\n                            to={{\n                                pathname: pathname[1],\n                                res,\n                                ticketStatusExport\n                            }}>\n                            <CButton style={{ margin: \"1px\" }} color=\"primary\">\n                                Edit<br></br><small>(teamResp)</small>\n                            </CButton>\n                        </Link><br></br>\n\n                        <Link\n                            to={{\n                                pathname: pathname[2],\n                                res,\n                                ticketStatusExport\n                            }}>\n                            <CButton style={{ margin: \"1px\" }} color=\"primary\">\n                                Edit<br></br><small>(teamMemb)</small>\n                            </CButton>\n                        </Link>\n                    </>\n            })\n\n            modifiedRowExport.push({\n                \"ticketNo\": res.ticketNo,\n                \"ticketType\": res.ticketType,\n                \"email\": res.customerEmail,\n                \"customerName\": res.customerName,\n                \"customerAddress\": res.customerAddress,\n                \"mobileNo\": res.customerMNo,\n                \"priority\": res.priority,\n                \"bu\": res.BUName,\n                \"buTr\": res.teamRepresentativeName,\n                \"validity\": res.isValid == true ? \"Valid\" : \"InValid\",\n                \"inWarrantyExport\": res.inWarranty == true ? \"In Warranty\" : \"Out of Warranty\",\n                \"ticketStatusExport\": ticketStatusExport,\n                \"modeOfSupport\": res.modeOfSupport,\n                \"complains\": res.remarks,\n                \"actionTaken\": res.actionTaken,\n                \"reasonForDelay\": res.delayReason,\n                \"concernedEngg\": res.assignedMemberName,\n                \"startDate\": moment(res.startDate).format('ll'),\n                \"closingDate\": moment(res.closingDate).format('ll'),\n                \"dueDate\": moment(res.dueDate).format('ll'),\n                \"remarks\":res.remarks\n            })\n\n            iterator++;\n            toGoFun(iterator);\n        })\n\n        function toGoFun(j) {\n            console.log(\"iterator\", j)\n            if (j == data.length) {\n                updateRows(modifiedRow);\n                updateExportRows(modifiedRowExport);\n            }\n        }\n    }\n\n    const [tableColumnExtensions] = useState([\n        { columnName: 'ticketNo', width: 125 },\n        { columnName: 'ticketType', width: 125 },\n        { columnName: 'bu', width: 180 },\n        { columnName: 'concernedEngg', width: 180 },\n        { columnName: 'warrantyStatus', width: 150 },\n        { columnName: 'customerName', width: 200 },\n        { columnName: 'customerAddress', width: 180 },\n        { columnName: 'complains', width: 200 },\n        { columnName: 'remarks', width: 200 },\n        { columnName: 'buTr', width: 200 },\n        { columnName: 'validity', width: 120 },\n        { columnName: \"modeOfSupport\", width: 180 },\n        { columnName: 'mobileNo', width: 140 },\n        { columnName: 'email', width: 140 },\n        { columnName: 'ticketStatus', width: 140 },\n        { columnName: 'startDate', width: 140 },\n        { columnName: 'dueDate', width: 140 },\n        { columnName: 'priority', width: 140 },\n        { columnName: 'actionTaken', width: 140 },\n        { columnName: 'reasonForDelay', width: 200 },\n        { columnName: 'closingDate', width: 140 },\n        { columnName: 'action', width: 100 },\n    ]);\n\n    //FOR ROW EXPAND\n    const [expandedRowIds, setExpandedRowIds] = useState();\n\n    //FOR FIXED\n    const [leftColumns] = useState(['ticketNo'], RowDetail);\n    const [rightColumns] = useState(['action']);\n\n    //FOR PAGINATION\n    const [currentPage, setCurrentPage] = useState(0);\n    const [pageSize, setPageSize] = useState(10);\n    const [pageSizes] = useState([5, 10, 15]);\n\n    //FOR SEARCHING - Not working right now\n    // const [rows1, setRows] = useState([]);\n    // const [loading, setLoading] = useState(false);\n    // const [searchValue, setSearchValue] = useState('');\n    // const [lastQuery, setLastQuery] = useState();\n\n    // const getQueryString = () => {\n    //     let filter = columns.reduce((acc, { name }) => {\n    //         acc.push(`[\"${name}\", \"contains\", \"${encodeURIComponent(searchValue)}\"]`);\n    //         return acc;\n    //     }, []).join(',\"or\",');\n\n    //     if (columns.length > 1) {\n    //         filter = `[${filter}]`;\n    //     }\n\n    //     return `${URL}?filter=${filter}`;\n    // };\n\n    // const loadData = () => {\n    //     const queryString = getQueryString();\n    //     console.log(\"querye string+988+84+18+--+ -------\", queryString)\n    //     console.log(\"queryb hjabdjlasbdlja\", queryString != lastQuery, !loading)\n    //     if (queryString !== lastQuery && !loading) {\n    //         console.log(\"query sringdf ----------------\", queryString)\n    //         setLoading(true);\n    //         fetch(queryString)\n    //             .then(response => response.json())\n    //             .then((orders) => {\n    //                 console.log(\"orders --------------- \", orders)\n    //                 updateRows(orders.data);\n    //                 setLoading(false);\n    //             })\n    //             .catch(() => setLoading(false));\n    //         setLastQuery(queryString);\n    //     }\n    // };\n\n    const [searchValue, setSearchState] = useState('');\n\n    // useEffect(() => loadData());    \n\n    //FOR COLUMN WIDTH CHANGE\n    const [columnWidths, setColumnWidths] = useState(tableColumnExtensions);\n    const [resizingMode, setResizingMode] = useState('widget');\n\n    const resetWidths = () => {\n        setColumnWidths(tableColumnExtensions);\n    };\n\n\n    return (\n\n        <Paper\n            style={{ marginTop: \"-20px\" }}\n        >\n            <Grid\n                rows={rows}\n                columns={columns}\n            // style={{ height: \"55vh\" }}\n            >\n                <SortingState\n                    defaultSorting={[{ columnName: 'amount', direction: 'asc' }, { columnName: 'saleDate', direction: 'asc' }]}\n                />\n                <IntegratedSorting />\n                <PagingState\n                    currentPage={currentPage}\n                    onCurrentPageChange={setCurrentPage}\n                    pageSize={pageSize}\n                    onPageSizeChange={setPageSize}\n                />\n                <IntegratedPaging />\n\n                <SearchState\n                    // onValueChange={setSearchValue}\n                    value={searchValue}\n                    onValueChange={setSearchState}\n                />\n                <IntegratedFiltering />\n                <RowDetailState\n                    expandedRowIds={expandedRowIds}\n                    onExpandedRowIdsChange={setExpandedRowIds}\n                />\n                <VirtualTable\n                    columnExtensions={tableColumnExtensions}\n\n                />\n                <TableColumnResizing\n                    columnWidths={columnWidths}\n                    onColumnWidthsChange={setColumnWidths}\n                    resizingMode={resizingMode}\n                />\n                <TableHeaderRow showSortingControls />\n                <TableRowDetail\n                    contentComponent={RowDetail}\n                />\n                <Toolbar />\n                <ResizingPanel\n                    defaultValue={resizingMode}\n                    changeMode={setResizingMode}\n                    resetWidths={resetWidths}\n                />\n                <SearchPanel />\n                <ExportPanel startExport={startExport} />\n                <TableFixedColumns\n                    leftColumns={leftColumns}\n                    rightColumns={rightColumns}\n                />\n                <PagingPanel\n                    pageSizes={pageSizes}\n                />\n            </Grid>\n            {/* {loading && <Loading />} */}\n            <GridExporter\n                ref={exporterRef}\n                rows={exportRows}\n                columns={exportColumns}\n                onSave={onSave}\n            />\n        </Paper>\n\n    );\n};","export default function (seed = 123456789) {\n    let mW = seed;\n    let mZ = 987654321;\n    const mask = 0xffffffff;\n  \n    return () => {\n      mZ = ((36969 * (mZ & 65535)) + (mZ >> 16)) & mask;\n      mW = ((18000 * (mW & 65535)) + (mW >> 16)) & mask;\n      let result = ((mZ << 16) + mW) & mask;\n      result /= 4294967296;\n      return result + 0.5;\n    };\n  }\n  "],"sourceRoot":""}